//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistryTableConverter.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "io/cucumber/datatable/CucumberDataTableException.h"
#include "io/cucumber/datatable/DataTable.h"
#include "io/cucumber/datatable/DataTableType.h"
#include "io/cucumber/datatable/DataTableTypeRegistry.h"
#include "io/cucumber/datatable/DataTableTypeRegistryTableConverter.h"
#include "io/cucumber/datatable/TypeFactory.h"
#include "io/cucumber/datatable/UndefinedDataTableTypeException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface IoCucumberDatatableDataTableTypeRegistryTableConverter () {
 @public
  IoCucumberDatatableDataTableTypeRegistry *registry_;
}

- (id)toSingletonWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                          withJavaLangReflectType:(id<JavaLangReflectType>)type;

- (id<JavaUtilList>)toListOrNullWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                         withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilList>)toListOrNullWithJavaUtilList:(id<JavaUtilList>)cells
                         withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

+ (id<JavaUtilMap>)createMapWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaUtilList:(id<JavaUtilList>)keys
                            withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                   withJavaUtilList:(id<JavaUtilList>)values;

- (id<JavaUtilList>)convertEntryKeysWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                           withJavaUtilList:(id<JavaUtilList>)keyColumn
                                    withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                                withBoolean:(jboolean)firstHeaderCellIsBlank;

- (id<JavaUtilList>)convertEntryValuesWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                               withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                               withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                                           withBoolean:(jboolean)keysImplyTableEntryTransformer;

+ (id<JavaUtilList>)unpackWithJavaUtilList:(id<JavaUtilList>)cells;

@end

J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTableTypeRegistryTableConverter, registry_, IoCucumberDatatableDataTableTypeRegistry *)

__attribute__((unused)) static id IoCucumberDatatableDataTableTypeRegistryTableConverter_toSingletonWithIoCucumberDatatableDataTable_withJavaLangReflectType_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, IoCucumberDatatableDataTable *dataTable, id<JavaLangReflectType> type);

__attribute__((unused)) static id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithIoCucumberDatatableDataTable_withJavaLangReflectType_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, IoCucumberDatatableDataTable *dataTable, id<JavaLangReflectType> itemType);

__attribute__((unused)) static id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithJavaUtilList_withJavaLangReflectType_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, id<JavaUtilList> cells, id<JavaLangReflectType> itemType);

__attribute__((unused)) static id<JavaUtilMap> IoCucumberDatatableDataTableTypeRegistryTableConverter_createMapWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withJavaUtilList_(id<JavaLangReflectType> keyType, id<JavaUtilList> keys, id<JavaLangReflectType> valueType, id<JavaUtilList> values);

__attribute__((unused)) static id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_convertEntryKeysWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withBoolean_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, id<JavaLangReflectType> keyType, id<JavaUtilList> keyColumn, id<JavaLangReflectType> valueType, jboolean firstHeaderCellIsBlank);

__attribute__((unused)) static id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_convertEntryValuesWithIoCucumberDatatableDataTable_withJavaLangReflectType_withJavaLangReflectType_withBoolean_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, IoCucumberDatatableDataTable *dataTable, id<JavaLangReflectType> keyType, id<JavaLangReflectType> valueType, jboolean keysImplyTableEntryTransformer);

__attribute__((unused)) static id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_unpackWithJavaUtilList_(id<JavaUtilList> cells);

@implementation IoCucumberDatatableDataTableTypeRegistryTableConverter

- (instancetype __nonnull)initWithIoCucumberDatatableDataTableTypeRegistry:(IoCucumberDatatableDataTableTypeRegistry *)registry {
  IoCucumberDatatableDataTableTypeRegistryTableConverter_initWithIoCucumberDatatableDataTableTypeRegistry_(self, registry);
  return self;
}

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type {
  return [self convertWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:type withBoolean:false];
}

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type
                                  withBoolean:(jboolean)transposed {
  if (dataTable == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"dataTable may not be null");
  if (type == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"type may not be null");
  if (transposed) {
    dataTable = [dataTable transpose];
  }
  IoCucumberDatatableDataTableType *tableType = [((IoCucumberDatatableDataTableTypeRegistry *) nil_chk(registry_)) lookupTableTypeByTypeWithJavaLangReflectType:type];
  if (tableType != nil) {
    return [tableType transformWithJavaUtilList:[((IoCucumberDatatableDataTable *) nil_chk(dataTable)) cells]];
  }
  if ([type isEqual:IoCucumberDatatableDataTable_class_()]) {
    return dataTable;
  }
  id<JavaLangReflectType> mapKeyType = IoCucumberDatatableDataTable_AbstractTableConverter_mapKeyTypeWithJavaLangReflectType_(type);
  if (mapKeyType != nil) {
    id<JavaLangReflectType> mapValueType = IoCucumberDatatableDataTable_AbstractTableConverter_mapValueTypeWithJavaLangReflectType_(type);
    return [self toMapWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:mapKeyType withJavaLangReflectType:mapValueType];
  }
  else if ([JavaUtilMap_class_() isEqual:type]) {
    return [self toMapWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:NSString_class_() withJavaLangReflectType:NSString_class_()];
  }
  id<JavaLangReflectType> itemType = IoCucumberDatatableDataTable_AbstractTableConverter_listItemTypeWithJavaLangReflectType_(type);
  if (itemType == nil) {
    if ([JavaUtilList_class_() isEqual:type]) {
      return [self toListWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:NSString_class_()];
    }
    else {
      return IoCucumberDatatableDataTableTypeRegistryTableConverter_toSingletonWithIoCucumberDatatableDataTable_withJavaLangReflectType_(self, dataTable, type);
    }
  }
  id<JavaLangReflectType> mapKeyItemType = IoCucumberDatatableDataTable_AbstractTableConverter_mapKeyTypeWithJavaLangReflectType_(itemType);
  if (mapKeyItemType != nil) {
    id<JavaLangReflectType> mapValueType = IoCucumberDatatableDataTable_AbstractTableConverter_mapValueTypeWithJavaLangReflectType_(itemType);
    return [self toMapsWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:mapKeyItemType withJavaLangReflectType:mapValueType];
  }
  else if ([JavaUtilMap_class_() isEqual:itemType]) {
    return [self toMapsWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:NSString_class_() withJavaLangReflectType:NSString_class_()];
  }
  id<JavaLangReflectType> listItemType = IoCucumberDatatableDataTable_AbstractTableConverter_listItemTypeWithJavaLangReflectType_(itemType);
  if (listItemType != nil) {
    return [self toListsWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:listItemType];
  }
  else if ([JavaUtilList_class_() isEqual:itemType]) {
    return [self toListsWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:NSString_class_()];
  }
  return [self toListWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:itemType];
}

- (id)toSingletonWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                          withJavaLangReflectType:(id<JavaLangReflectType>)type {
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_toSingletonWithIoCucumberDatatableDataTable_withJavaLangReflectType_(self, dataTable, type);
}

- (id<JavaUtilList>)toListWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  if (dataTable == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"dataTable may not be null");
  if (itemType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"itemType may not be null");
  if ([dataTable isEmpty]) {
    return JavaUtilCollections_emptyList();
  }
  id<JavaUtilList> list = IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithIoCucumberDatatableDataTable_withJavaLangReflectType_(self, dataTable, itemType);
  if (list != nil) {
    return JavaUtilCollections_unmodifiableListWithJavaUtilList_(list);
  }
  if ([dataTable width] > 1) {
    @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_listNoConverterDefinedWithJavaLangReflectType_withNSString_withJavaLangReflectType_(itemType, @"TableEntryTransformer or TableRowTransformer", itemType));
  }
  @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_listNoConverterDefinedWithJavaLangReflectType_withNSString_withJavaLangReflectType_(itemType, @"TableEntryTransformer, TableRowTransformer or TableCellTransformer", itemType));
}

- (id<JavaUtilList>)toListOrNullWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                         withJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithIoCucumberDatatableDataTable_withJavaLangReflectType_(self, dataTable, itemType);
}

- (id<JavaUtilList>)toListOrNullWithJavaUtilList:(id<JavaUtilList>)cells
                         withJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithJavaUtilList_withJavaLangReflectType_(self, cells, itemType);
}

- (id<JavaUtilList>)toListsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                    withJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  if (dataTable == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"dataTable may not be null");
  if (itemType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"itemType may not be null");
  if ([dataTable isEmpty]) {
    return JavaUtilCollections_emptyList();
  }
  IoCucumberDatatableDataTableType *tableType = [((IoCucumberDatatableDataTableTypeRegistry *) nil_chk(registry_)) lookupTableTypeByTypeWithJavaLangReflectType:IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(itemType))];
  if (tableType != nil) {
    return JavaUtilCollections_unmodifiableListWithJavaUtilList_((id<JavaUtilList>) cast_check([tableType transformWithJavaUtilList:[dataTable cells]], JavaUtilList_class_()));
  }
  @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_listsNoConverterDefinedWithJavaLangReflectType_(itemType));
}

- (id<JavaUtilMap>)toMapWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                 withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                 withJavaLangReflectType:(id<JavaLangReflectType>)valueType {
  if (dataTable == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"dataTable may not be null");
  if (keyType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"keyType may not be null");
  if (valueType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"valueType may not be null");
  if ([dataTable isEmpty]) {
    return JavaUtilCollections_emptyMap();
  }
  IoCucumberDatatableDataTable *keyColumn = [dataTable columnsWithInt:0 withInt:1];
  IoCucumberDatatableDataTable *valueColumns = [dataTable columnsWithInt:1];
  NSString *firstHeaderCell = [((IoCucumberDatatableDataTable *) nil_chk(keyColumn)) cellWithInt:0 withInt:0];
  jboolean firstHeaderCellIsBlank = firstHeaderCell == nil || [firstHeaderCell java_isEmpty];
  id<JavaUtilList> keys = IoCucumberDatatableDataTableTypeRegistryTableConverter_convertEntryKeysWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withBoolean_(self, keyType, [keyColumn cells], valueType, firstHeaderCellIsBlank);
  if ([((IoCucumberDatatableDataTable *) nil_chk(valueColumns)) isEmpty]) {
    return IoCucumberDatatableDataTableTypeRegistryTableConverter_createMapWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withJavaUtilList_(keyType, keys, valueType, JavaUtilCollections_nCopiesWithInt_withId_([((id<JavaUtilList>) nil_chk(keys)) size], nil));
  }
  jboolean keysImplyTableRowTransformer = [((id<JavaUtilList>) nil_chk(keys)) size] == [dataTable height] - 1;
  id<JavaUtilList> values = IoCucumberDatatableDataTableTypeRegistryTableConverter_convertEntryValuesWithIoCucumberDatatableDataTable_withJavaLangReflectType_withJavaLangReflectType_withBoolean_(self, valueColumns, keyType, valueType, keysImplyTableRowTransformer);
  if ([keys size] != [((id<JavaUtilList>) nil_chk(values)) size]) {
    @throw nil_chk(IoCucumberDatatableCucumberDataTableException_keyValueMismatchExceptionWithBoolean_withInt_withJavaLangReflectType_withInt_withJavaLangReflectType_(firstHeaderCellIsBlank, [keys size], keyType, [values size], valueType));
  }
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_createMapWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withJavaUtilList_(keyType, keys, valueType, values);
}

+ (id<JavaUtilMap>)createMapWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaUtilList:(id<JavaUtilList>)keys
                            withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                   withJavaUtilList:(id<JavaUtilList>)values {
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_createMapWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withJavaUtilList_(keyType, keys, valueType, values);
}

- (id<JavaUtilList>)convertEntryKeysWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                           withJavaUtilList:(id<JavaUtilList>)keyColumn
                                    withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                                withBoolean:(jboolean)firstHeaderCellIsBlank {
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_convertEntryKeysWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withBoolean_(self, keyType, keyColumn, valueType, firstHeaderCellIsBlank);
}

- (id<JavaUtilList>)convertEntryValuesWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                               withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                               withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                                           withBoolean:(jboolean)keysImplyTableEntryTransformer {
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_convertEntryValuesWithIoCucumberDatatableDataTable_withJavaLangReflectType_withJavaLangReflectType_withBoolean_(self, dataTable, keyType, valueType, keysImplyTableEntryTransformer);
}

- (id<JavaUtilList>)toMapsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaLangReflectType:(id<JavaLangReflectType>)valueType {
  if (dataTable == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"dataTable may not be null");
  if (keyType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"keyType may not be null");
  if (valueType == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"valueType may not be null");
  if ([dataTable isEmpty]) {
    return JavaUtilCollections_emptyList();
  }
  IoCucumberDatatableDataTableType *keyConverter = [((IoCucumberDatatableDataTableTypeRegistry *) nil_chk(registry_)) lookupTableTypeByTypeWithJavaLangReflectType:IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(keyType))];
  IoCucumberDatatableDataTableType *valueConverter = [registry_ lookupTableTypeByTypeWithJavaLangReflectType:IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(valueType))];
  if (keyConverter == nil) {
    @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_mapsNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectType_(keyType, valueType, keyType));
  }
  if (valueConverter == nil) {
    @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_mapsNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectType_(keyType, valueType, valueType));
  }
  IoCucumberDatatableDataTable *header = [dataTable rowsWithInt:0 withInt:1];
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  id<JavaUtilList> keys = IoCucumberDatatableDataTableTypeRegistryTableConverter_unpackWithJavaUtilList_((id<JavaUtilList>) cast_check([keyConverter transformWithJavaUtilList:[((IoCucumberDatatableDataTable *) nil_chk(header)) cells]], JavaUtilList_class_()));
  IoCucumberDatatableDataTable *rows = [dataTable rowsWithInt:1];
  if ([((IoCucumberDatatableDataTable *) nil_chk(rows)) isEmpty]) {
    return JavaUtilCollections_emptyList();
  }
  id<JavaUtilList> transform = (id<JavaUtilList>) cast_check([valueConverter transformWithJavaUtilList:[rows cells]], JavaUtilList_class_());
  for (id<JavaUtilList> __strong values in nil_chk(transform)) {
    [result addWithId:IoCucumberDatatableDataTableTypeRegistryTableConverter_createMapWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withJavaUtilList_(keyType, keys, valueType, values)];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(result);
}

+ (id<JavaUtilList>)unpackWithJavaUtilList:(id<JavaUtilList>)cells {
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_unpackWithJavaUtilList_(cells);
}

- (void)dealloc {
  RELEASE_(registry_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x2, 6, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 7, 2, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 9, 2, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 2, -1, 13, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 20, 21, -1, 22, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 23, 24, -1, 25, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 26, 15, -1, 27, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 28, 29, -1, 30, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableDataTableTypeRegistry:);
  methods[1].selector = @selector(convertWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[2].selector = @selector(convertWithIoCucumberDatatableDataTable:withJavaLangReflectType:withBoolean:);
  methods[3].selector = @selector(toSingletonWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[4].selector = @selector(toListWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[5].selector = @selector(toListOrNullWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[6].selector = @selector(toListOrNullWithJavaUtilList:withJavaLangReflectType:);
  methods[7].selector = @selector(toListsWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[8].selector = @selector(toMapWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:);
  methods[9].selector = @selector(createMapWithJavaLangReflectType:withJavaUtilList:withJavaLangReflectType:withJavaUtilList:);
  methods[10].selector = @selector(convertEntryKeysWithJavaLangReflectType:withJavaUtilList:withJavaLangReflectType:withBoolean:);
  methods[11].selector = @selector(convertEntryValuesWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:withBoolean:);
  methods[12].selector = @selector(toMapsWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:);
  methods[13].selector = @selector(unpackWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "registry_", "LIoCucumberDatatableDataTableTypeRegistry;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberDatatableDataTableTypeRegistry;", "convert", "LIoCucumberDatatableDataTable;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)TT;", "LIoCucumberDatatableDataTable;LJavaLangReflectType;Z", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Z)TT;", "toSingleton", "toList", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)Ljava/util/List<TT;>;", "toListOrNull", "LJavaUtilList;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;Ljava/lang/reflect/Type;)Ljava/util/List<TT;>;", "toLists", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/List<TT;>;>;", "toMap", "LIoCucumberDatatableDataTable;LJavaLangReflectType;LJavaLangReflectType;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/Map<TK;TV;>;", "createMap", "LJavaLangReflectType;LJavaUtilList;LJavaLangReflectType;LJavaUtilList;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/reflect/Type;Ljava/util/List<TK;>;Ljava/lang/reflect/Type;Ljava/util/List<TV;>;)Ljava/util/Map<TK;TV;>;", "convertEntryKeys", "LJavaLangReflectType;LJavaUtilList;LJavaLangReflectType;Z", "<K:Ljava/lang/Object;>(Ljava/lang/reflect/Type;Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;Ljava/lang/reflect/Type;Z)Ljava/util/List<TK;>;", "convertEntryValues", "LIoCucumberDatatableDataTable;LJavaLangReflectType;LJavaLangReflectType;Z", "<V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Z)Ljava/util/List<TV;>;", "toMaps", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/Map<TK;TV;>;>;", "unpack", "LJavaUtilList;", "<T:Ljava/lang/Object;>(Ljava/util/List<Ljava/util/List<TT;>;>;)Ljava/util/List<TT;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTableTypeRegistryTableConverter = { "DataTableTypeRegistryTableConverter", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x11, 14, 1, -1, -1, -1, -1, -1 };
  return &_IoCucumberDatatableDataTableTypeRegistryTableConverter;
}

@end

void IoCucumberDatatableDataTableTypeRegistryTableConverter_initWithIoCucumberDatatableDataTableTypeRegistry_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, IoCucumberDatatableDataTableTypeRegistry *registry) {
  IoCucumberDatatableDataTable_AbstractTableConverter_init(self);
  JreStrongAssign(&self->registry_, registry);
}

IoCucumberDatatableDataTableTypeRegistryTableConverter *new_IoCucumberDatatableDataTableTypeRegistryTableConverter_initWithIoCucumberDatatableDataTableTypeRegistry_(IoCucumberDatatableDataTableTypeRegistry *registry) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableTypeRegistryTableConverter, initWithIoCucumberDatatableDataTableTypeRegistry_, registry)
}

IoCucumberDatatableDataTableTypeRegistryTableConverter *create_IoCucumberDatatableDataTableTypeRegistryTableConverter_initWithIoCucumberDatatableDataTableTypeRegistry_(IoCucumberDatatableDataTableTypeRegistry *registry) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableTypeRegistryTableConverter, initWithIoCucumberDatatableDataTableTypeRegistry_, registry)
}

id IoCucumberDatatableDataTableTypeRegistryTableConverter_toSingletonWithIoCucumberDatatableDataTable_withJavaLangReflectType_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, IoCucumberDatatableDataTable *dataTable, id<JavaLangReflectType> type) {
  if ([((IoCucumberDatatableDataTable *) nil_chk(dataTable)) isEmpty]) {
    return nil;
  }
  id<JavaUtilList> singletonList = IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithIoCucumberDatatableDataTable_withJavaLangReflectType_(self, dataTable, type);
  if (singletonList == nil) {
    @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_singletonNoConverterDefinedWithJavaLangReflectType_(type));
  }
  if ([singletonList size] == 1) {
    return [singletonList getWithInt:0];
  }
  @throw nil_chk(IoCucumberDatatableCucumberDataTableException_cantConvertToWithJavaLangReflectType_withNSString_(type, JreStrcat("$@", @"The table contained more then one item: ", singletonList)));
}

id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithIoCucumberDatatableDataTable_withJavaLangReflectType_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, IoCucumberDatatableDataTable *dataTable, id<JavaLangReflectType> itemType) {
  return IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithJavaUtilList_withJavaLangReflectType_(self, [((IoCucumberDatatableDataTable *) nil_chk(dataTable)) cells], itemType);
}

id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithJavaUtilList_withJavaLangReflectType_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, id<JavaUtilList> cells, id<JavaLangReflectType> itemType) {
  IoCucumberDatatableDataTableType *tableType = [((IoCucumberDatatableDataTableTypeRegistry *) nil_chk(self->registry_)) lookupTableTypeByTypeWithJavaLangReflectType:IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(itemType)];
  if (tableType != nil) {
    return (id<JavaUtilList>) cast_check([tableType transformWithJavaUtilList:cells], JavaUtilList_class_());
  }
  IoCucumberDatatableDataTableType *cellValueType = [self->registry_ lookupTableTypeByTypeWithJavaLangReflectType:IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(itemType))];
  if (cellValueType != nil) {
    return IoCucumberDatatableDataTableTypeRegistryTableConverter_unpackWithJavaUtilList_((id<JavaUtilList>) cast_check([cellValueType transformWithJavaUtilList:cells], JavaUtilList_class_()));
  }
  return nil;
}

id<JavaUtilMap> IoCucumberDatatableDataTableTypeRegistryTableConverter_createMapWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withJavaUtilList_(id<JavaLangReflectType> keyType, id<JavaUtilList> keys, id<JavaLangReflectType> valueType, id<JavaUtilList> values) {
  IoCucumberDatatableDataTableTypeRegistryTableConverter_initialize();
  id<JavaUtilIterator> keyIterator = [((id<JavaUtilList>) nil_chk(keys)) iterator];
  id<JavaUtilIterator> valueIterator = [((id<JavaUtilList>) nil_chk(values)) iterator];
  id<JavaUtilMap> result = create_JavaUtilLinkedHashMap_init();
  while ([((id<JavaUtilIterator>) nil_chk(keyIterator)) hasNext] && [((id<JavaUtilIterator>) nil_chk(valueIterator)) hasNext]) {
    id key = [keyIterator next];
    id value = [((id<JavaUtilIterator>) nil_chk(valueIterator)) next];
    id replaced = [result putWithId:key withId:value];
    if (replaced != nil) {
      @throw nil_chk(IoCucumberDatatableCucumberDataTableException_duplicateKeyExceptionWithJavaLangReflectType_withJavaLangReflectType_withId_withId_withId_(keyType, valueType, key, value, replaced));
    }
  }
  return JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(result);
}

id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_convertEntryKeysWithJavaLangReflectType_withJavaUtilList_withJavaLangReflectType_withBoolean_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, id<JavaLangReflectType> keyType, id<JavaUtilList> keyColumn, id<JavaLangReflectType> valueType, jboolean firstHeaderCellIsBlank) {
  if (firstHeaderCellIsBlank) {
    IoCucumberDatatableDataTableType *keyConverter;
    keyConverter = [((IoCucumberDatatableDataTableTypeRegistry *) nil_chk(self->registry_)) lookupTableTypeByTypeWithJavaLangReflectType:IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(keyType))];
    if (keyConverter == nil) {
      @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_mapNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withNSString_withJavaLangReflectType_(keyType, valueType, @"TableCellTransformer", keyType));
    }
    return IoCucumberDatatableDataTableTypeRegistryTableConverter_unpackWithJavaUtilList_((id<JavaUtilList>) cast_check([keyConverter transformWithJavaUtilList:[((id<JavaUtilList>) nil_chk(keyColumn)) subListWithInt:1 withInt:[keyColumn size]]], JavaUtilList_class_()));
  }
  id<JavaUtilList> list = IoCucumberDatatableDataTableTypeRegistryTableConverter_toListOrNullWithJavaUtilList_withJavaLangReflectType_(self, keyColumn, keyType);
  if (list != nil) {
    return list;
  }
  @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_mapNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withNSString_withJavaLangReflectType_(keyType, valueType, @"TableEntryTransformer or TableCellTransformer", keyType));
}

id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_convertEntryValuesWithIoCucumberDatatableDataTable_withJavaLangReflectType_withJavaLangReflectType_withBoolean_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, IoCucumberDatatableDataTable *dataTable, id<JavaLangReflectType> keyType, id<JavaLangReflectType> valueType, jboolean keysImplyTableEntryTransformer) {
  id<JavaLangReflectType> valueMapKeyType = IoCucumberDatatableDataTable_AbstractTableConverter_mapKeyTypeWithJavaLangReflectType_(valueType);
  if (valueMapKeyType != nil) {
    id<JavaLangReflectType> valueMapValueType = IoCucumberDatatableDataTable_AbstractTableConverter_mapValueTypeWithJavaLangReflectType_(valueType);
    return [self toMapsWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:valueMapKeyType withJavaLangReflectType:valueMapValueType];
  }
  else if ([JavaUtilMap_class_() isEqual:valueType]) {
    return [self toMapsWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:NSString_class_() withJavaLangReflectType:NSString_class_()];
  }
  IoCucumberDatatableDataTableType *entryValueConverter = [((IoCucumberDatatableDataTableTypeRegistry *) nil_chk(self->registry_)) lookupTableTypeByTypeWithJavaLangReflectType:IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(valueType)];
  if (entryValueConverter != nil) {
    return (id<JavaUtilList>) cast_check([entryValueConverter transformWithJavaUtilList:[((IoCucumberDatatableDataTable *) nil_chk(dataTable)) cells]], JavaUtilList_class_());
  }
  if (keysImplyTableEntryTransformer) {
    @throw nil_chk(IoCucumberDatatableCucumberDataTableException_keysImplyTableEntryTransformerWithJavaLangReflectType_withJavaLangReflectType_(keyType, valueType));
  }
  IoCucumberDatatableDataTableType *cellValueConverter = [self->registry_ lookupTableTypeByTypeWithJavaLangReflectType:IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(valueType))];
  if (cellValueConverter != nil) {
    return IoCucumberDatatableDataTableTypeRegistryTableConverter_unpackWithJavaUtilList_((id<JavaUtilList>) cast_check([cellValueConverter transformWithJavaUtilList:[((IoCucumberDatatableDataTable *) nil_chk(dataTable)) cells]], JavaUtilList_class_()));
  }
  @throw nil_chk(IoCucumberDatatableUndefinedDataTableTypeException_mapNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withNSString_withJavaLangReflectType_(keyType, valueType, @"TableEntryTransformer or TableCellTransformer", valueType));
}

id<JavaUtilList> IoCucumberDatatableDataTableTypeRegistryTableConverter_unpackWithJavaUtilList_(id<JavaUtilList> cells) {
  IoCucumberDatatableDataTableTypeRegistryTableConverter_initialize();
  id<JavaUtilList> unpacked = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(cells)) size]);
  for (id<JavaUtilList> __strong row in cells) {
    [unpacked addAllWithJavaUtilCollection:row];
  }
  return unpacked;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTableTypeRegistryTableConverter)
