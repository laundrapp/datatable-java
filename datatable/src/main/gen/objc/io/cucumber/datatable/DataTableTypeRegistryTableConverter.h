//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/DataTableTypeRegistryTableConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberDatatableDataTableTypeRegistryTableConverter")
#ifdef RESTRICT_IoCucumberDatatableDataTableTypeRegistryTableConverter
#define INCLUDE_ALL_IoCucumberDatatableDataTableTypeRegistryTableConverter 0
#else
#define INCLUDE_ALL_IoCucumberDatatableDataTableTypeRegistryTableConverter 1
#endif
#undef RESTRICT_IoCucumberDatatableDataTableTypeRegistryTableConverter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberDatatableDataTableTypeRegistryTableConverter_) && (INCLUDE_ALL_IoCucumberDatatableDataTableTypeRegistryTableConverter || defined(INCLUDE_IoCucumberDatatableDataTableTypeRegistryTableConverter))
#define IoCucumberDatatableDataTableTypeRegistryTableConverter_

#define RESTRICT_IoCucumberDatatableDataTable 1
#define INCLUDE_IoCucumberDatatableDataTable_AbstractTableConverter 1
#include "io/cucumber/datatable/DataTable.h"

@class IoCucumberDatatableDataTable;
@class IoCucumberDatatableDataTableTypeRegistry;
@protocol JavaLangReflectType;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface IoCucumberDatatableDataTableTypeRegistryTableConverter : IoCucumberDatatableDataTable_AbstractTableConverter

#pragma mark Public

- (instancetype __nonnull)initWithIoCucumberDatatableDataTableTypeRegistry:(IoCucumberDatatableDataTableTypeRegistry *)registry;

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type;

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type
                                  withBoolean:(jboolean)transposed;

- (id<JavaUtilList>)toListWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilList>)toListsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                    withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilMap>)toMapWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                 withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                 withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

- (id<JavaUtilList>)toMapsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTableTypeRegistryTableConverter)

FOUNDATION_EXPORT void IoCucumberDatatableDataTableTypeRegistryTableConverter_initWithIoCucumberDatatableDataTableTypeRegistry_(IoCucumberDatatableDataTableTypeRegistryTableConverter *self, IoCucumberDatatableDataTableTypeRegistry *registry);

FOUNDATION_EXPORT IoCucumberDatatableDataTableTypeRegistryTableConverter *new_IoCucumberDatatableDataTableTypeRegistryTableConverter_initWithIoCucumberDatatableDataTableTypeRegistry_(IoCucumberDatatableDataTableTypeRegistry *registry) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableDataTableTypeRegistryTableConverter *create_IoCucumberDatatableDataTableTypeRegistryTableConverter_initWithIoCucumberDatatableDataTableTypeRegistry_(IoCucumberDatatableDataTableTypeRegistry *registry);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTableTypeRegistryTableConverter)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberDatatableDataTableTypeRegistryTableConverter")
