//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/CucumberDataTableException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberDatatableCucumberDataTableException")
#ifdef RESTRICT_IoCucumberDatatableCucumberDataTableException
#define INCLUDE_ALL_IoCucumberDatatableCucumberDataTableException 0
#else
#define INCLUDE_ALL_IoCucumberDatatableCucumberDataTableException 1
#endif
#undef RESTRICT_IoCucumberDatatableCucumberDataTableException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberDatatableCucumberDataTableException_) && (INCLUDE_ALL_IoCucumberDatatableCucumberDataTableException || defined(INCLUDE_IoCucumberDatatableCucumberDataTableException))
#define IoCucumberDatatableCucumberDataTableException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;
@protocol JavaLangReflectType;

@interface IoCucumberDatatableCucumberDataTableException : JavaLangRuntimeException

#pragma mark Package-Private

- (instancetype __nonnull)initWithNSString:(NSString *)message;

- (instancetype __nonnull)initWithNSString:(NSString *)s
                     withJavaLangThrowable:(JavaLangThrowable *)throwable;

+ (IoCucumberDatatableCucumberDataTableException *)cantConvertToWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                                                           withNSString:(NSString *)message;

+ (IoCucumberDatatableCucumberDataTableException *)duplicateKeyExceptionWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                                                        withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                                                                         withId:(id)key
                                                                                         withId:(id)value
                                                                                         withId:(id)replaced;

+ (IoCucumberDatatableCucumberDataTableException *)keysImplyTableEntryTransformerWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                                                                 withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

+ (IoCucumberDatatableCucumberDataTableException *)keyValueMismatchExceptionWithBoolean:(jboolean)firstHeaderCellIsBlank
                                                                                withInt:(jint)keySize
                                                                withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                                                                withInt:(jint)valueSize
                                                                withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableCucumberDataTableException)

FOUNDATION_EXPORT void IoCucumberDatatableCucumberDataTableException_initWithNSString_(IoCucumberDatatableCucumberDataTableException *self, NSString *message);

FOUNDATION_EXPORT IoCucumberDatatableCucumberDataTableException *new_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableCucumberDataTableException *create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT void IoCucumberDatatableCucumberDataTableException_initWithNSString_withJavaLangThrowable_(IoCucumberDatatableCucumberDataTableException *self, NSString *s, JavaLangThrowable *throwable);

FOUNDATION_EXPORT IoCucumberDatatableCucumberDataTableException *new_IoCucumberDatatableCucumberDataTableException_initWithNSString_withJavaLangThrowable_(NSString *s, JavaLangThrowable *throwable) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableCucumberDataTableException *create_IoCucumberDatatableCucumberDataTableException_initWithNSString_withJavaLangThrowable_(NSString *s, JavaLangThrowable *throwable);

FOUNDATION_EXPORT IoCucumberDatatableCucumberDataTableException *IoCucumberDatatableCucumberDataTableException_cantConvertToWithJavaLangReflectType_withNSString_(id<JavaLangReflectType> type, NSString *message);

FOUNDATION_EXPORT IoCucumberDatatableCucumberDataTableException *IoCucumberDatatableCucumberDataTableException_duplicateKeyExceptionWithJavaLangReflectType_withJavaLangReflectType_withId_withId_withId_(id<JavaLangReflectType> keyType, id<JavaLangReflectType> valueType, id key, id value, id replaced);

FOUNDATION_EXPORT IoCucumberDatatableCucumberDataTableException *IoCucumberDatatableCucumberDataTableException_keyValueMismatchExceptionWithBoolean_withInt_withJavaLangReflectType_withInt_withJavaLangReflectType_(jboolean firstHeaderCellIsBlank, jint keySize, id<JavaLangReflectType> keyType, jint valueSize, id<JavaLangReflectType> valueType);

FOUNDATION_EXPORT IoCucumberDatatableCucumberDataTableException *IoCucumberDatatableCucumberDataTableException_keysImplyTableEntryTransformerWithJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> keyType, id<JavaLangReflectType> valueType);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableCucumberDataTableException)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberDatatableCucumberDataTableException")
