//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/TypeFactory.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "com/fasterxml/jackson/databind/type/CollectionType.h"
#include "com/fasterxml/jackson/databind/type/TypeFactory.h"
#include "io/cucumber/datatable/TypeFactory.h"
#include "java/lang/reflect/Type.h"
#include "java/util/List.h"

@interface IoCucumberDatatableTypeFactory ()

- (instancetype __nonnull)init;

@end

inline ComFasterxmlJacksonDatabindTypeTypeFactory *IoCucumberDatatableTypeFactory_get_typeFactory(void);
static ComFasterxmlJacksonDatabindTypeTypeFactory *IoCucumberDatatableTypeFactory_typeFactory;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberDatatableTypeFactory, typeFactory, ComFasterxmlJacksonDatabindTypeTypeFactory *)

__attribute__((unused)) static void IoCucumberDatatableTypeFactory_init(IoCucumberDatatableTypeFactory *self);

__attribute__((unused)) static IoCucumberDatatableTypeFactory *new_IoCucumberDatatableTypeFactory_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableTypeFactory *create_IoCucumberDatatableTypeFactory_init(void);

J2OBJC_INITIALIZED_DEFN(IoCucumberDatatableTypeFactory)

@implementation IoCucumberDatatableTypeFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberDatatableTypeFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ComFasterxmlJacksonDatabindJavaType *)aListOfWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(type);
}

+ (ComFasterxmlJacksonDatabindJavaType *)constructTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return IoCucumberDatatableTypeFactory_constructTypeWithJavaLangReflectType_(type);
}

+ (NSString *)typeNameWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x8, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(aListOfWithJavaLangReflectType:);
  methods[2].selector = @selector(constructTypeWithJavaLangReflectType:);
  methods[3].selector = @selector(typeNameWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "typeFactory", "LComFasterxmlJacksonDatabindTypeTypeFactory;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "aListOf", "LJavaLangReflectType;", "constructType", "typeName", &IoCucumberDatatableTypeFactory_typeFactory };
  static const J2ObjcClassInfo _IoCucumberDatatableTypeFactory = { "TypeFactory", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x10, 4, 1, -1, -1, -1, -1, -1 };
  return &_IoCucumberDatatableTypeFactory;
}

+ (void)initialize {
  if (self == [IoCucumberDatatableTypeFactory class]) {
    JreStrongAssign(&IoCucumberDatatableTypeFactory_typeFactory, ComFasterxmlJacksonDatabindTypeTypeFactory_defaultInstance());
    J2OBJC_SET_INITIALIZED(IoCucumberDatatableTypeFactory)
  }
}

@end

void IoCucumberDatatableTypeFactory_init(IoCucumberDatatableTypeFactory *self) {
  NSObject_init(self);
}

IoCucumberDatatableTypeFactory *new_IoCucumberDatatableTypeFactory_init() {
  J2OBJC_NEW_IMPL(IoCucumberDatatableTypeFactory, init)
}

IoCucumberDatatableTypeFactory *create_IoCucumberDatatableTypeFactory_init() {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableTypeFactory, init)
}

ComFasterxmlJacksonDatabindJavaType *IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  IoCucumberDatatableTypeFactory_initialize();
  return [((ComFasterxmlJacksonDatabindTypeTypeFactory *) nil_chk(IoCucumberDatatableTypeFactory_typeFactory)) constructCollectionTypeWithIOSClass:JavaUtilList_class_() withComFasterxmlJacksonDatabindJavaType:[IoCucumberDatatableTypeFactory_typeFactory constructTypeWithJavaLangReflectType:type]];
}

ComFasterxmlJacksonDatabindJavaType *IoCucumberDatatableTypeFactory_constructTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  IoCucumberDatatableTypeFactory_initialize();
  return [((ComFasterxmlJacksonDatabindTypeTypeFactory *) nil_chk(IoCucumberDatatableTypeFactory_typeFactory)) constructTypeWithJavaLangReflectType:type];
}

NSString *IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  IoCucumberDatatableTypeFactory_initialize();
  if ([type isKindOfClass:[IOSClass class]]) {
    IOSClass *clazz = (IOSClass *) cast_chk(type, [IOSClass class]);
    return [((IOSClass *) nil_chk(clazz)) getName];
  }
  return [((id<JavaLangReflectType>) nil_chk(type)) description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableTypeFactory)
