//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/UndefinedDataTableTypeException.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/datatable/CucumberDataTableException.h"
#include "io/cucumber/datatable/TypeFactory.h"
#include "io/cucumber/datatable/UndefinedDataTableTypeException.h"
#include "java/lang/reflect/Type.h"

@interface IoCucumberDatatableUndefinedDataTableTypeException ()

- (instancetype __nonnull)initWithNSString:(NSString *)message;

@end

__attribute__((unused)) static void IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(IoCucumberDatatableUndefinedDataTableTypeException *self, NSString *message);

__attribute__((unused)) static IoCucumberDatatableUndefinedDataTableTypeException *new_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableUndefinedDataTableTypeException *create_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString *message);

@implementation IoCucumberDatatableUndefinedDataTableTypeException

- (instancetype __nonnull)initWithNSString:(NSString *)message {
  IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(self, message);
  return self;
}

+ (IoCucumberDatatableUndefinedDataTableTypeException *)singletonNoConverterDefinedWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return IoCucumberDatatableUndefinedDataTableTypeException_singletonNoConverterDefinedWithJavaLangReflectType_(type);
}

+ (IoCucumberDatatableUndefinedDataTableTypeException *)mapNoConverterDefinedWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                                                             withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                                                                        withNSString:(NSString *)missingConverter
                                                                             withJavaLangReflectType:(id<JavaLangReflectType>)typeToRegister {
  return IoCucumberDatatableUndefinedDataTableTypeException_mapNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withNSString_withJavaLangReflectType_(keyType, valueType, missingConverter, typeToRegister);
}

+ (IoCucumberDatatableUndefinedDataTableTypeException *)mapsNoConverterDefinedWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                                                              withJavaLangReflectType:(id<JavaLangReflectType>)valueType
                                                                              withJavaLangReflectType:(id<JavaLangReflectType>)typeToRegister {
  return IoCucumberDatatableUndefinedDataTableTypeException_mapsNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectType_(keyType, valueType, typeToRegister);
}

+ (IoCucumberDatatableCucumberDataTableException *)listNoConverterDefinedWithJavaLangReflectType:(id<JavaLangReflectType>)itemType
                                                                                    withNSString:(NSString *)missingConverter
                                                                         withJavaLangReflectType:(id<JavaLangReflectType>)typeToRegister {
  return IoCucumberDatatableUndefinedDataTableTypeException_listNoConverterDefinedWithJavaLangReflectType_withNSString_withJavaLangReflectType_(itemType, missingConverter, typeToRegister);
}

+ (IoCucumberDatatableCucumberDataTableException *)listsNoConverterDefinedWithJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  return IoCucumberDatatableUndefinedDataTableTypeException_listsNoConverterDefinedWithJavaLangReflectType_(itemType);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableUndefinedDataTableTypeException;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableUndefinedDataTableTypeException;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableUndefinedDataTableTypeException;", 0x8, 5, 6, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableCucumberDataTableException;", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableCucumberDataTableException;", 0x8, 9, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(singletonNoConverterDefinedWithJavaLangReflectType:);
  methods[2].selector = @selector(mapNoConverterDefinedWithJavaLangReflectType:withJavaLangReflectType:withNSString:withJavaLangReflectType:);
  methods[3].selector = @selector(mapsNoConverterDefinedWithJavaLangReflectType:withJavaLangReflectType:withJavaLangReflectType:);
  methods[4].selector = @selector(listNoConverterDefinedWithJavaLangReflectType:withNSString:withJavaLangReflectType:);
  methods[5].selector = @selector(listsNoConverterDefinedWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "singletonNoConverterDefined", "LJavaLangReflectType;", "mapNoConverterDefined", "LJavaLangReflectType;LJavaLangReflectType;LNSString;LJavaLangReflectType;", "mapsNoConverterDefined", "LJavaLangReflectType;LJavaLangReflectType;LJavaLangReflectType;", "listNoConverterDefined", "LJavaLangReflectType;LNSString;LJavaLangReflectType;", "listsNoConverterDefined" };
  static const J2ObjcClassInfo _IoCucumberDatatableUndefinedDataTableTypeException = { "UndefinedDataTableTypeException", "io.cucumber.datatable", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, -1, -1, -1, -1 };
  return &_IoCucumberDatatableUndefinedDataTableTypeException;
}

@end

void IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(IoCucumberDatatableUndefinedDataTableTypeException *self, NSString *message) {
  IoCucumberDatatableCucumberDataTableException_initWithNSString_(self, message);
}

IoCucumberDatatableUndefinedDataTableTypeException *new_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableUndefinedDataTableTypeException, initWithNSString_, message)
}

IoCucumberDatatableUndefinedDataTableTypeException *create_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableUndefinedDataTableTypeException, initWithNSString_, message)
}

IoCucumberDatatableUndefinedDataTableTypeException *IoCucumberDatatableUndefinedDataTableTypeException_singletonNoConverterDefinedWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  IoCucumberDatatableUndefinedDataTableTypeException_initialize();
  return create_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to %s. Please register a DataTableType with a TableTransformer, TableEntryTransformer or TableRowTransformer for %s", [IOSObjectArray arrayWithObjects:(id[]){ IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(type), type } count:2 type:NSObject_class_()]));
}

IoCucumberDatatableUndefinedDataTableTypeException *IoCucumberDatatableUndefinedDataTableTypeException_mapNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withNSString_withJavaLangReflectType_(id<JavaLangReflectType> keyType, id<JavaLangReflectType> valueType, NSString *missingConverter, id<JavaLangReflectType> typeToRegister) {
  IoCucumberDatatableUndefinedDataTableTypeException_initialize();
  return create_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to Map<%s, %s>. Please register a DataTableType with a %s for %s", [IOSObjectArray arrayWithObjects:(id[]){ IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(keyType), IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(valueType), missingConverter, typeToRegister } count:4 type:NSObject_class_()]));
}

IoCucumberDatatableUndefinedDataTableTypeException *IoCucumberDatatableUndefinedDataTableTypeException_mapsNoConverterDefinedWithJavaLangReflectType_withJavaLangReflectType_withJavaLangReflectType_(id<JavaLangReflectType> keyType, id<JavaLangReflectType> valueType, id<JavaLangReflectType> typeToRegister) {
  IoCucumberDatatableUndefinedDataTableTypeException_initialize();
  return create_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<Map<%s, %s>>. Please register a DataTableType with a TableCellTransformer for %s", [IOSObjectArray arrayWithObjects:(id[]){ IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(keyType), IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(valueType), typeToRegister } count:3 type:NSObject_class_()]));
}

IoCucumberDatatableCucumberDataTableException *IoCucumberDatatableUndefinedDataTableTypeException_listNoConverterDefinedWithJavaLangReflectType_withNSString_withJavaLangReflectType_(id<JavaLangReflectType> itemType, NSString *missingConverter, id<JavaLangReflectType> typeToRegister) {
  IoCucumberDatatableUndefinedDataTableTypeException_initialize();
  return create_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<%s>. Please register a DataTableType with a %s for %s", [IOSObjectArray arrayWithObjects:(id[]){ IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(itemType), missingConverter, typeToRegister } count:3 type:NSObject_class_()]));
}

IoCucumberDatatableCucumberDataTableException *IoCucumberDatatableUndefinedDataTableTypeException_listsNoConverterDefinedWithJavaLangReflectType_(id<JavaLangReflectType> itemType) {
  IoCucumberDatatableUndefinedDataTableTypeException_initialize();
  return create_IoCucumberDatatableUndefinedDataTableTypeException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<List<%s>>. Please register a DataTableType with a TableCellTransformer for %s", [IOSObjectArray arrayWithObjects:(id[]){ IoCucumberDatatableTypeFactory_typeNameWithJavaLangReflectType_(itemType), itemType } count:2 type:NSObject_class_()]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableUndefinedDataTableTypeException)
