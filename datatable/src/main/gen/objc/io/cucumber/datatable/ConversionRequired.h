//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/ConversionRequired.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberDatatableConversionRequired")
#ifdef RESTRICT_IoCucumberDatatableConversionRequired
#define INCLUDE_ALL_IoCucumberDatatableConversionRequired 0
#else
#define INCLUDE_ALL_IoCucumberDatatableConversionRequired 1
#endif
#undef RESTRICT_IoCucumberDatatableConversionRequired

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberDatatableConversionRequired_) && (INCLUDE_ALL_IoCucumberDatatableConversionRequired || defined(INCLUDE_IoCucumberDatatableConversionRequired))
#define IoCucumberDatatableConversionRequired_

#define RESTRICT_IoCucumberDatatableDataTable 1
#define INCLUDE_IoCucumberDatatableDataTable_TableConverter 1
#include "io/cucumber/datatable/DataTable.h"

@class IoCucumberDatatableDataTable;
@protocol JavaLangReflectType;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface IoCucumberDatatableConversionRequired : NSObject < IoCucumberDatatableDataTable_TableConverter >

#pragma mark Public

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type;

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type
                                  withBoolean:(jboolean)transposed;

- (id<JavaUtilList>)toListWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilList>)toListsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                    withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilMap>)toMapWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                 withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                 withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

- (id<JavaUtilList>)toMapsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableConversionRequired)

FOUNDATION_EXPORT void IoCucumberDatatableConversionRequired_init(IoCucumberDatatableConversionRequired *self);

FOUNDATION_EXPORT IoCucumberDatatableConversionRequired *new_IoCucumberDatatableConversionRequired_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableConversionRequired *create_IoCucumberDatatableConversionRequired_init(void);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableConversionRequired)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberDatatableConversionRequired")
