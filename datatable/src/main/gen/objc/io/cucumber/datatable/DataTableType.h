//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/DataTableType.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberDatatableDataTableType")
#ifdef RESTRICT_IoCucumberDatatableDataTableType
#define INCLUDE_ALL_IoCucumberDatatableDataTableType 0
#else
#define INCLUDE_ALL_IoCucumberDatatableDataTableType 1
#endif
#undef RESTRICT_IoCucumberDatatableDataTableType

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberDatatableDataTableType_) && (INCLUDE_ALL_IoCucumberDatatableDataTableType || defined(INCLUDE_IoCucumberDatatableDataTableType))
#define IoCucumberDatatableDataTableType_

@class ComFasterxmlJacksonDatabindJavaType;
@class IOSClass;
@protocol IoCucumberDatatableTableCellTransformer;
@protocol IoCucumberDatatableTableEntryTransformer;
@protocol IoCucumberDatatableTableRowTransformer;
@protocol IoCucumberDatatableTableTransformer;
@protocol JavaUtilList;

/*!
 @brief A data table targetType describes how a data table should be represented as an object.
 - seealso: <a href="https://github.com/cucumber/cucumber/tree/master/datatable">DataTable - README.md</a>
 */
@interface IoCucumberDatatableDataTableType : NSObject

#pragma mark Public

/*!
 @brief Creates a data table type that transforms the cells of the table into a list of lists of objects.
 @param type the type of the list of lists items
 @param transformer a function that creates an instance of  <code> type </code>  from the data table cell
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
withIoCucumberDatatableTableCellTransformer:(id<IoCucumberDatatableTableCellTransformer>)transformer;

/*!
 @brief Creates a data table type that transforms the entries of the table into a list of objects.An entry consists
  of the elements of the table header paired with the values of each subsequent row.
 @param type the type of the list items
 @param transformer a function that creates an instance of  <code> type </code>  from the data table entry
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
withIoCucumberDatatableTableEntryTransformer:(id<IoCucumberDatatableTableEntryTransformer>)transformer;

/*!
 @brief Creates a data table type that transforms the rows of the table into a list of objects.
 @param type the type of the list items
 @param transformer a function that creates an instance of  <code> type </code>  from the data table row
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
withIoCucumberDatatableTableRowTransformer:(id<IoCucumberDatatableTableRowTransformer>)transformer;

/*!
 @brief Creates a data table type that transforms the whole table to a single object.
 @param type the type of the object
 @param transformer a function that creates an instance of  <code> type </code>  from the data table
 */
- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
   withIoCucumberDatatableTableTransformer:(id<IoCucumberDatatableTableTransformer>)transformer;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (id)transformWithJavaUtilList:(id<JavaUtilList>)raw;

#pragma mark Package-Private

- (IOSClass *)getElementType;

- (ComFasterxmlJacksonDatabindJavaType *)getTargetType;

- (IOSClass *)getTransformerType;

- (NSString *)toCanonical;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(IoCucumberDatatableDataTableType)

FOUNDATION_EXPORT void IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<IoCucumberDatatableTableTransformer> transformer);

FOUNDATION_EXPORT IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableTransformer_(IOSClass *type, id<IoCucumberDatatableTableTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableTransformer_(IOSClass *type, id<IoCucumberDatatableTableTransformer> transformer);

FOUNDATION_EXPORT void IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableRowTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<IoCucumberDatatableTableRowTransformer> transformer);

FOUNDATION_EXPORT IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableRowTransformer_(IOSClass *type, id<IoCucumberDatatableTableRowTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableRowTransformer_(IOSClass *type, id<IoCucumberDatatableTableRowTransformer> transformer);

FOUNDATION_EXPORT void IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<IoCucumberDatatableTableEntryTransformer> transformer);

FOUNDATION_EXPORT IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_(IOSClass *type, id<IoCucumberDatatableTableEntryTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_(IOSClass *type, id<IoCucumberDatatableTableEntryTransformer> transformer);

FOUNDATION_EXPORT void IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableCellTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<IoCucumberDatatableTableCellTransformer> transformer);

FOUNDATION_EXPORT IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableCellTransformer_(IOSClass *type, id<IoCucumberDatatableTableCellTransformer> transformer) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableCellTransformer_(IOSClass *type, id<IoCucumberDatatableTableCellTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTableType)

#endif

#if !defined (IoCucumberDatatableDataTableType_RawTableTransformer_) && (INCLUDE_ALL_IoCucumberDatatableDataTableType || defined(INCLUDE_IoCucumberDatatableDataTableType_RawTableTransformer))
#define IoCucumberDatatableDataTableType_RawTableTransformer_

@class IOSClass;
@protocol JavaUtilList;

@protocol IoCucumberDatatableDataTableType_RawTableTransformer < JavaObject >

- (IOSClass *)getOriginalTransformerType;

- (id)transformWithJavaUtilList:(id<JavaUtilList>)raw;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTableType_RawTableTransformer)

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTableType_RawTableTransformer)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberDatatableDataTableType")
