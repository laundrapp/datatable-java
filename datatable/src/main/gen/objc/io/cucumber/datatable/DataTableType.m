//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/DataTableType.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/fasterxml/jackson/databind/JavaType.h"
#include "io/cucumber/datatable/ConversionRequired.h"
#include "io/cucumber/datatable/CucumberDataTableException.h"
#include "io/cucumber/datatable/DataTable.h"
#include "io/cucumber/datatable/DataTableType.h"
#include "io/cucumber/datatable/TableCellTransformer.h"
#include "io/cucumber/datatable/TableEntryTransformer.h"
#include "io/cucumber/datatable/TableRowTransformer.h"
#include "io/cucumber/datatable/TableTransformer.h"
#include "io/cucumber/datatable/TypeFactory.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Throwable.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface IoCucumberDatatableDataTableType () {
 @public
  ComFasterxmlJacksonDatabindJavaType *targetType_;
  id<IoCucumberDatatableDataTableType_RawTableTransformer> transformer_;
  IOSClass *elementType_;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
                   withJavaLangReflectType:(id<JavaLangReflectType>)target
withIoCucumberDatatableDataTableType_RawTableTransformer:(id<IoCucumberDatatableDataTableType_RawTableTransformer>)transformer;

@end

J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTableType, targetType_, ComFasterxmlJacksonDatabindJavaType *)
J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTableType, transformer_, id<IoCucumberDatatableDataTableType_RawTableTransformer>)
J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTableType, elementType_, IOSClass *)

inline IoCucumberDatatableConversionRequired *IoCucumberDatatableDataTableType_get_CONVERSION_REQUIRED(void);
static IoCucumberDatatableConversionRequired *IoCucumberDatatableDataTableType_CONVERSION_REQUIRED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(IoCucumberDatatableDataTableType, CONVERSION_REQUIRED, IoCucumberDatatableConversionRequired *)

__attribute__((unused)) static void IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<JavaLangReflectType> target, id<IoCucumberDatatableDataTableType_RawTableTransformer> transformer);

__attribute__((unused)) static IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(IOSClass *type, id<JavaLangReflectType> target, id<IoCucumberDatatableDataTableType_RawTableTransformer> transformer) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(IOSClass *type, id<JavaLangReflectType> target, id<IoCucumberDatatableDataTableType_RawTableTransformer> transformer);

@interface IoCucumberDatatableDataTableType_RawTableTransformer : NSObject

@end

@interface IoCucumberDatatableDataTableType_TableCellTransformerAdaptor : NSObject < IoCucumberDatatableDataTableType_RawTableTransformer > {
 @public
  id<IoCucumberDatatableTableCellTransformer> transformer_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableTableCellTransformer:(id<IoCucumberDatatableTableCellTransformer>)transformer;

- (IOSClass *)getOriginalTransformerType;

- (id<JavaUtilList>)transformWithJavaUtilList:(id<JavaUtilList>)raw;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTableType_TableCellTransformerAdaptor)

J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTableType_TableCellTransformerAdaptor, transformer_, id<IoCucumberDatatableTableCellTransformer>)

__attribute__((unused)) static void IoCucumberDatatableDataTableType_TableCellTransformerAdaptor_initWithIoCucumberDatatableTableCellTransformer_(IoCucumberDatatableDataTableType_TableCellTransformerAdaptor *self, id<IoCucumberDatatableTableCellTransformer> transformer);

__attribute__((unused)) static IoCucumberDatatableDataTableType_TableCellTransformerAdaptor *new_IoCucumberDatatableDataTableType_TableCellTransformerAdaptor_initWithIoCucumberDatatableTableCellTransformer_(id<IoCucumberDatatableTableCellTransformer> transformer) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTableType_TableCellTransformerAdaptor *create_IoCucumberDatatableDataTableType_TableCellTransformerAdaptor_initWithIoCucumberDatatableTableCellTransformer_(id<IoCucumberDatatableTableCellTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTableType_TableCellTransformerAdaptor)

@interface IoCucumberDatatableDataTableType_TableRowTransformerAdaptor : NSObject < IoCucumberDatatableDataTableType_RawTableTransformer > {
 @public
  id<IoCucumberDatatableTableRowTransformer> transformer_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableTableRowTransformer:(id<IoCucumberDatatableTableRowTransformer>)transformer;

- (IOSClass *)getOriginalTransformerType;

- (id<JavaUtilList>)transformWithJavaUtilList:(id<JavaUtilList>)raw;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTableType_TableRowTransformerAdaptor)

J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTableType_TableRowTransformerAdaptor, transformer_, id<IoCucumberDatatableTableRowTransformer>)

__attribute__((unused)) static void IoCucumberDatatableDataTableType_TableRowTransformerAdaptor_initWithIoCucumberDatatableTableRowTransformer_(IoCucumberDatatableDataTableType_TableRowTransformerAdaptor *self, id<IoCucumberDatatableTableRowTransformer> transformer);

__attribute__((unused)) static IoCucumberDatatableDataTableType_TableRowTransformerAdaptor *new_IoCucumberDatatableDataTableType_TableRowTransformerAdaptor_initWithIoCucumberDatatableTableRowTransformer_(id<IoCucumberDatatableTableRowTransformer> transformer) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTableType_TableRowTransformerAdaptor *create_IoCucumberDatatableDataTableType_TableRowTransformerAdaptor_initWithIoCucumberDatatableTableRowTransformer_(id<IoCucumberDatatableTableRowTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTableType_TableRowTransformerAdaptor)

@interface IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor : NSObject < IoCucumberDatatableDataTableType_RawTableTransformer > {
 @public
  id<IoCucumberDatatableTableEntryTransformer> transformer_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableTableEntryTransformer:(id<IoCucumberDatatableTableEntryTransformer>)transformer;

- (IOSClass *)getOriginalTransformerType;

- (id<JavaUtilList>)transformWithJavaUtilList:(id<JavaUtilList>)raw;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor)

J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor, transformer_, id<IoCucumberDatatableTableEntryTransformer>)

__attribute__((unused)) static void IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor_initWithIoCucumberDatatableTableEntryTransformer_(IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor *self, id<IoCucumberDatatableTableEntryTransformer> transformer);

__attribute__((unused)) static IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor *new_IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor_initWithIoCucumberDatatableTableEntryTransformer_(id<IoCucumberDatatableTableEntryTransformer> transformer) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor *create_IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor_initWithIoCucumberDatatableTableEntryTransformer_(id<IoCucumberDatatableTableEntryTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor)

@interface IoCucumberDatatableDataTableType_TableTransformerAdaptor : NSObject < IoCucumberDatatableDataTableType_RawTableTransformer > {
 @public
  id<IoCucumberDatatableTableTransformer> transformer_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableTableTransformer:(id<IoCucumberDatatableTableTransformer>)transformer;

- (IOSClass *)getOriginalTransformerType;

- (id)transformWithJavaUtilList:(id<JavaUtilList>)raw;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTableType_TableTransformerAdaptor)

J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTableType_TableTransformerAdaptor, transformer_, id<IoCucumberDatatableTableTransformer>)

__attribute__((unused)) static void IoCucumberDatatableDataTableType_TableTransformerAdaptor_initWithIoCucumberDatatableTableTransformer_(IoCucumberDatatableDataTableType_TableTransformerAdaptor *self, id<IoCucumberDatatableTableTransformer> transformer);

__attribute__((unused)) static IoCucumberDatatableDataTableType_TableTransformerAdaptor *new_IoCucumberDatatableDataTableType_TableTransformerAdaptor_initWithIoCucumberDatatableTableTransformer_(id<IoCucumberDatatableTableTransformer> transformer) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTableType_TableTransformerAdaptor *create_IoCucumberDatatableDataTableType_TableTransformerAdaptor_initWithIoCucumberDatatableTableTransformer_(id<IoCucumberDatatableTableTransformer> transformer);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTableType_TableTransformerAdaptor)

J2OBJC_INITIALIZED_DEFN(IoCucumberDatatableDataTableType)

@implementation IoCucumberDatatableDataTableType

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
                   withJavaLangReflectType:(id<JavaLangReflectType>)target
withIoCucumberDatatableDataTableType_RawTableTransformer:(id<IoCucumberDatatableDataTableType_RawTableTransformer>)transformer {
  IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(self, type, target, transformer);
  return self;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
   withIoCucumberDatatableTableTransformer:(id<IoCucumberDatatableTableTransformer>)transformer {
  IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableTransformer_(self, type, transformer);
  return self;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
withIoCucumberDatatableTableRowTransformer:(id<IoCucumberDatatableTableRowTransformer>)transformer {
  IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableRowTransformer_(self, type, transformer);
  return self;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
withIoCucumberDatatableTableEntryTransformer:(id<IoCucumberDatatableTableEntryTransformer>)transformer {
  IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_(self, type, transformer);
  return self;
}

- (instancetype __nonnull)initWithIOSClass:(IOSClass *)type
withIoCucumberDatatableTableCellTransformer:(id<IoCucumberDatatableTableCellTransformer>)transformer {
  IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableCellTransformer_(self, type, transformer);
  return self;
}

- (id)transformWithJavaUtilList:(id<JavaUtilList>)raw {
  @try {
    return [((id<IoCucumberDatatableDataTableType_RawTableTransformer>) nil_chk(transformer_)) transformWithJavaUtilList:raw];
  }
  @catch (JavaLangThrowable *throwable) {
    @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_withJavaLangThrowable_(NSString_java_formatWithNSString_withNSObjectArray_(@"'%s' could not transform%n%s", [IOSObjectArray arrayWithObjects:(id[]){ [self toCanonical], IoCucumberDatatableDataTable_createWithJavaUtilList_(raw) } count:2 type:NSObject_class_()]), throwable);
  }
}

- (ComFasterxmlJacksonDatabindJavaType *)getTargetType {
  return targetType_;
}

- (NSString *)toCanonical {
  return [((ComFasterxmlJacksonDatabindJavaType *) nil_chk(targetType_)) toCanonical];
}

- (IOSClass *)getElementType {
  return elementType_;
}

- (IOSClass *)getTransformerType {
  return [((id<IoCucumberDatatableDataTableType_RawTableTransformer>) nil_chk(transformer_)) getOriginalTransformerType];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  IoCucumberDatatableDataTableType *that = (IoCucumberDatatableDataTableType *) cast_chk(o, [IoCucumberDatatableDataTableType class]);
  return [((ComFasterxmlJacksonDatabindJavaType *) nil_chk(targetType_)) isEqual:that->targetType_];
}

- (NSUInteger)hash {
  return ((jint) [((ComFasterxmlJacksonDatabindJavaType *) nil_chk(targetType_)) hash]);
}

- (void)dealloc {
  RELEASE_(targetType_);
  RELEASE_(transformer_);
  RELEASE_(elementType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, 7, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, 9, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LComFasterxmlJacksonDatabindJavaType;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x0, -1, -1, -1, 13, -1, -1 },
    { NULL, "LIOSClass;", 0x0, -1, -1, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withJavaLangReflectType:withIoCucumberDatatableDataTableType_RawTableTransformer:);
  methods[1].selector = @selector(initWithIOSClass:withIoCucumberDatatableTableTransformer:);
  methods[2].selector = @selector(initWithIOSClass:withIoCucumberDatatableTableRowTransformer:);
  methods[3].selector = @selector(initWithIOSClass:withIoCucumberDatatableTableEntryTransformer:);
  methods[4].selector = @selector(initWithIOSClass:withIoCucumberDatatableTableCellTransformer:);
  methods[5].selector = @selector(transformWithJavaUtilList:);
  methods[6].selector = @selector(getTargetType);
  methods[7].selector = @selector(toCanonical);
  methods[8].selector = @selector(getElementType);
  methods[9].selector = @selector(getTransformerType);
  methods[10].selector = @selector(isEqual:);
  methods[11].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CONVERSION_REQUIRED", "LIoCucumberDatatableConversionRequired;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "targetType_", "LComFasterxmlJacksonDatabindJavaType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "transformer_", "LIoCucumberDatatableDataTableType_RawTableTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "elementType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LJavaLangReflectType;LIoCucumberDatatableDataTableType_RawTableTransformer;", "(Ljava/lang/Class<*>;Ljava/lang/reflect/Type;Lio/cucumber/datatable/DataTableType$RawTableTransformer<*>;)V", "LIOSClass;LIoCucumberDatatableTableTransformer;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lio/cucumber/datatable/TableTransformer<TT;>;)V", "LIOSClass;LIoCucumberDatatableTableRowTransformer;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lio/cucumber/datatable/TableRowTransformer<TT;>;)V", "LIOSClass;LIoCucumberDatatableTableEntryTransformer;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lio/cucumber/datatable/TableEntryTransformer<TT;>;)V", "LIOSClass;LIoCucumberDatatableTableCellTransformer;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lio/cucumber/datatable/TableCellTransformer<TT;>;)V", "transform", "LJavaUtilList;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)Ljava/lang/Object;", "()Ljava/lang/Class<*>;", "equals", "LNSObject;", "hashCode", &IoCucumberDatatableDataTableType_CONVERSION_REQUIRED, "Lio/cucumber/datatable/DataTableType$RawTableTransformer<*>;", "Ljava/lang/Class<*>;", "LIoCucumberDatatableDataTableType_RawTableTransformer;LIoCucumberDatatableDataTableType_TableCellTransformerAdaptor;LIoCucumberDatatableDataTableType_TableRowTransformerAdaptor;LIoCucumberDatatableDataTableType_TableEntryTransformerAdaptor;LIoCucumberDatatableDataTableType_TableTransformerAdaptor;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTableType = { "DataTableType", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x11, 12, 4, -1, 20, -1, -1, -1 };
  return &_IoCucumberDatatableDataTableType;
}

+ (void)initialize {
  if (self == [IoCucumberDatatableDataTableType class]) {
    JreStrongAssignAndConsume(&IoCucumberDatatableDataTableType_CONVERSION_REQUIRED, new_IoCucumberDatatableConversionRequired_init());
    J2OBJC_SET_INITIALIZED(IoCucumberDatatableDataTableType)
  }
}

@end

void IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<JavaLangReflectType> target, id<IoCucumberDatatableDataTableType_RawTableTransformer> transformer) {
  NSObject_init(self);
  if (type == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"targetType cannot be null");
  if (target == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"target cannot be null");
  if (transformer == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"transformer cannot be null");
  JreStrongAssign(&self->elementType_, type);
  JreStrongAssign(&self->targetType_, IoCucumberDatatableTypeFactory_constructTypeWithJavaLangReflectType_(target));
  JreStrongAssign(&self->transformer_, transformer);
}

IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(IOSClass *type, id<JavaLangReflectType> target, id<IoCucumberDatatableDataTableType_RawTableTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_, type, target, transformer)
}

IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(IOSClass *type, id<JavaLangReflectType> target, id<IoCucumberDatatableDataTableType_RawTableTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_, type, target, transformer)
}

void IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<IoCucumberDatatableTableTransformer> transformer) {
  IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(self, type, type, create_IoCucumberDatatableDataTableType_TableTransformerAdaptor_initWithIoCucumberDatatableTableTransformer_(transformer));
}

IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableTransformer_(IOSClass *type, id<IoCucumberDatatableTableTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withIoCucumberDatatableTableTransformer_, type, transformer)
}

IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableTransformer_(IOSClass *type, id<IoCucumberDatatableTableTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withIoCucumberDatatableTableTransformer_, type, transformer)
}

void IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableRowTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<IoCucumberDatatableTableRowTransformer> transformer) {
  IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(self, type, IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(type), create_IoCucumberDatatableDataTableType_TableRowTransformerAdaptor_initWithIoCucumberDatatableTableRowTransformer_(transformer));
}

IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableRowTransformer_(IOSClass *type, id<IoCucumberDatatableTableRowTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withIoCucumberDatatableTableRowTransformer_, type, transformer)
}

IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableRowTransformer_(IOSClass *type, id<IoCucumberDatatableTableRowTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withIoCucumberDatatableTableRowTransformer_, type, transformer)
}

void IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<IoCucumberDatatableTableEntryTransformer> transformer) {
  IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(self, type, IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(type), create_IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor_initWithIoCucumberDatatableTableEntryTransformer_(transformer));
}

IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_(IOSClass *type, id<IoCucumberDatatableTableEntryTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_, type, transformer)
}

IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_(IOSClass *type, id<IoCucumberDatatableTableEntryTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withIoCucumberDatatableTableEntryTransformer_, type, transformer)
}

void IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableCellTransformer_(IoCucumberDatatableDataTableType *self, IOSClass *type, id<IoCucumberDatatableTableCellTransformer> transformer) {
  IoCucumberDatatableDataTableType_initWithIOSClass_withJavaLangReflectType_withIoCucumberDatatableDataTableType_RawTableTransformer_(self, type, IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(IoCucumberDatatableTypeFactory_aListOfWithJavaLangReflectType_(type)), create_IoCucumberDatatableDataTableType_TableCellTransformerAdaptor_initWithIoCucumberDatatableTableCellTransformer_(transformer));
}

IoCucumberDatatableDataTableType *new_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableCellTransformer_(IOSClass *type, id<IoCucumberDatatableTableCellTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withIoCucumberDatatableTableCellTransformer_, type, transformer)
}

IoCucumberDatatableDataTableType *create_IoCucumberDatatableDataTableType_initWithIOSClass_withIoCucumberDatatableTableCellTransformer_(IOSClass *type, id<IoCucumberDatatableTableCellTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType, initWithIOSClass_withIoCucumberDatatableTableCellTransformer_, type, transformer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTableType)

@implementation IoCucumberDatatableDataTableType_RawTableTransformer

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LIOSClass;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x401, 1, 2, 3, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getOriginalTransformerType);
  methods[1].selector = @selector(transformWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/lang/Class<*>;", "transform", "LJavaUtilList;", "LJavaLangThrowable;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)TT;", "LIoCucumberDatatableDataTableType;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTableType_RawTableTransformer = { "RawTableTransformer", "io.cucumber.datatable", ptrTable, methods, NULL, 7, 0x608, 2, 0, 5, -1, -1, 6, -1 };
  return &_IoCucumberDatatableDataTableType_RawTableTransformer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTableType_RawTableTransformer)

@implementation IoCucumberDatatableDataTableType_TableCellTransformerAdaptor

- (instancetype __nonnull)initWithIoCucumberDatatableTableCellTransformer:(id<IoCucumberDatatableTableCellTransformer>)transformer {
  IoCucumberDatatableDataTableType_TableCellTransformerAdaptor_initWithIoCucumberDatatableTableCellTransformer_(self, transformer);
  return self;
}

- (IOSClass *)getOriginalTransformerType {
  return IoCucumberDatatableTableCellTransformer_class_();
}

- (id<JavaUtilList>)transformWithJavaUtilList:(id<JavaUtilList>)raw {
  id<JavaUtilList> list = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(raw)) size]);
  for (id<JavaUtilList> __strong tableRow in raw) {
    id<JavaUtilList> row = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(tableRow)) size]);
    for (NSString * __strong entry_ in tableRow) {
      [row addWithId:[((id<IoCucumberDatatableTableCellTransformer>) nil_chk(transformer_)) transformWithNSString:entry_]];
    }
    [list addWithId:row];
  }
  return list;
}

- (void)dealloc {
  RELEASE_(transformer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 4, 5, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableTableCellTransformer:);
  methods[1].selector = @selector(getOriginalTransformerType);
  methods[2].selector = @selector(transformWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "transformer_", "LIoCucumberDatatableTableCellTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberDatatableTableCellTransformer;", "(Lio/cucumber/datatable/TableCellTransformer<TT;>;)V", "()Ljava/lang/Class<*>;", "transform", "LJavaUtilList;", "LJavaLangThrowable;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)Ljava/util/List<Ljava/util/List<TT;>;>;", "Lio/cucumber/datatable/TableCellTransformer<TT;>;", "LIoCucumberDatatableDataTableType;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/cucumber/datatable/DataTableType$RawTableTransformer<Ljava/util/List<Ljava/util/List<TT;>;>;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTableType_TableCellTransformerAdaptor = { "TableCellTransformerAdaptor", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0xa, 3, 1, 8, -1, -1, 9, -1 };
  return &_IoCucumberDatatableDataTableType_TableCellTransformerAdaptor;
}

@end

void IoCucumberDatatableDataTableType_TableCellTransformerAdaptor_initWithIoCucumberDatatableTableCellTransformer_(IoCucumberDatatableDataTableType_TableCellTransformerAdaptor *self, id<IoCucumberDatatableTableCellTransformer> transformer) {
  NSObject_init(self);
  if (transformer == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"transformer cannot be null");
  JreStrongAssign(&self->transformer_, transformer);
}

IoCucumberDatatableDataTableType_TableCellTransformerAdaptor *new_IoCucumberDatatableDataTableType_TableCellTransformerAdaptor_initWithIoCucumberDatatableTableCellTransformer_(id<IoCucumberDatatableTableCellTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType_TableCellTransformerAdaptor, initWithIoCucumberDatatableTableCellTransformer_, transformer)
}

IoCucumberDatatableDataTableType_TableCellTransformerAdaptor *create_IoCucumberDatatableDataTableType_TableCellTransformerAdaptor_initWithIoCucumberDatatableTableCellTransformer_(id<IoCucumberDatatableTableCellTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType_TableCellTransformerAdaptor, initWithIoCucumberDatatableTableCellTransformer_, transformer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTableType_TableCellTransformerAdaptor)

@implementation IoCucumberDatatableDataTableType_TableRowTransformerAdaptor

- (instancetype __nonnull)initWithIoCucumberDatatableTableRowTransformer:(id<IoCucumberDatatableTableRowTransformer>)transformer {
  IoCucumberDatatableDataTableType_TableRowTransformerAdaptor_initWithIoCucumberDatatableTableRowTransformer_(self, transformer);
  return self;
}

- (IOSClass *)getOriginalTransformerType {
  return IoCucumberDatatableTableRowTransformer_class_();
}

- (id<JavaUtilList>)transformWithJavaUtilList:(id<JavaUtilList>)raw {
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  for (id<JavaUtilList> __strong tableRow in nil_chk(raw)) {
    [list addWithId:[((id<IoCucumberDatatableTableRowTransformer>) nil_chk(transformer_)) transformWithJavaUtilList:tableRow]];
  }
  return list;
}

- (void)dealloc {
  RELEASE_(transformer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 4, 5, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableTableRowTransformer:);
  methods[1].selector = @selector(getOriginalTransformerType);
  methods[2].selector = @selector(transformWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "transformer_", "LIoCucumberDatatableTableRowTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberDatatableTableRowTransformer;", "(Lio/cucumber/datatable/TableRowTransformer<TT;>;)V", "()Ljava/lang/Class<*>;", "transform", "LJavaUtilList;", "LJavaLangThrowable;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)Ljava/util/List<TT;>;", "Lio/cucumber/datatable/TableRowTransformer<TT;>;", "LIoCucumberDatatableDataTableType;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/cucumber/datatable/DataTableType$RawTableTransformer<Ljava/util/List<TT;>;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTableType_TableRowTransformerAdaptor = { "TableRowTransformerAdaptor", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0xa, 3, 1, 8, -1, -1, 9, -1 };
  return &_IoCucumberDatatableDataTableType_TableRowTransformerAdaptor;
}

@end

void IoCucumberDatatableDataTableType_TableRowTransformerAdaptor_initWithIoCucumberDatatableTableRowTransformer_(IoCucumberDatatableDataTableType_TableRowTransformerAdaptor *self, id<IoCucumberDatatableTableRowTransformer> transformer) {
  NSObject_init(self);
  if (transformer == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"transformer cannot be null");
  JreStrongAssign(&self->transformer_, transformer);
}

IoCucumberDatatableDataTableType_TableRowTransformerAdaptor *new_IoCucumberDatatableDataTableType_TableRowTransformerAdaptor_initWithIoCucumberDatatableTableRowTransformer_(id<IoCucumberDatatableTableRowTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType_TableRowTransformerAdaptor, initWithIoCucumberDatatableTableRowTransformer_, transformer)
}

IoCucumberDatatableDataTableType_TableRowTransformerAdaptor *create_IoCucumberDatatableDataTableType_TableRowTransformerAdaptor_initWithIoCucumberDatatableTableRowTransformer_(id<IoCucumberDatatableTableRowTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType_TableRowTransformerAdaptor, initWithIoCucumberDatatableTableRowTransformer_, transformer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTableType_TableRowTransformerAdaptor)

@implementation IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor

- (instancetype __nonnull)initWithIoCucumberDatatableTableEntryTransformer:(id<IoCucumberDatatableTableEntryTransformer>)transformer {
  IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor_initWithIoCucumberDatatableTableEntryTransformer_(self, transformer);
  return self;
}

- (IOSClass *)getOriginalTransformerType {
  return IoCucumberDatatableTableEntryTransformer_class_();
}

- (id<JavaUtilList>)transformWithJavaUtilList:(id<JavaUtilList>)raw {
  IoCucumberDatatableDataTable *table = IoCucumberDatatableDataTable_createWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(raw, JreLoadStatic(IoCucumberDatatableDataTableType, CONVERSION_REQUIRED));
  id<JavaUtilList> list = create_JavaUtilArrayList_init();
  for (id<JavaUtilMap> __strong entry_ in nil_chk([((IoCucumberDatatableDataTable *) nil_chk(table)) asMaps])) {
    [list addWithId:[((id<IoCucumberDatatableTableEntryTransformer>) nil_chk(transformer_)) transformWithJavaUtilMap:entry_]];
  }
  return list;
}

- (void)dealloc {
  RELEASE_(transformer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 3, 4, 5, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableTableEntryTransformer:);
  methods[1].selector = @selector(getOriginalTransformerType);
  methods[2].selector = @selector(transformWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "transformer_", "LIoCucumberDatatableTableEntryTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberDatatableTableEntryTransformer;", "(Lio/cucumber/datatable/TableEntryTransformer<TT;>;)V", "()Ljava/lang/Class<*>;", "transform", "LJavaUtilList;", "LJavaLangThrowable;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)Ljava/util/List<TT;>;", "Lio/cucumber/datatable/TableEntryTransformer<TT;>;", "LIoCucumberDatatableDataTableType;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/cucumber/datatable/DataTableType$RawTableTransformer<Ljava/util/List<TT;>;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor = { "TableEntryTransformerAdaptor", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0xa, 3, 1, 8, -1, -1, 9, -1 };
  return &_IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor;
}

@end

void IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor_initWithIoCucumberDatatableTableEntryTransformer_(IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor *self, id<IoCucumberDatatableTableEntryTransformer> transformer) {
  NSObject_init(self);
  if (transformer == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"transformer cannot be null");
  JreStrongAssign(&self->transformer_, transformer);
}

IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor *new_IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor_initWithIoCucumberDatatableTableEntryTransformer_(id<IoCucumberDatatableTableEntryTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor, initWithIoCucumberDatatableTableEntryTransformer_, transformer)
}

IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor *create_IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor_initWithIoCucumberDatatableTableEntryTransformer_(id<IoCucumberDatatableTableEntryTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor, initWithIoCucumberDatatableTableEntryTransformer_, transformer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTableType_TableEntryTransformerAdaptor)

@implementation IoCucumberDatatableDataTableType_TableTransformerAdaptor

- (instancetype __nonnull)initWithIoCucumberDatatableTableTransformer:(id<IoCucumberDatatableTableTransformer>)transformer {
  IoCucumberDatatableDataTableType_TableTransformerAdaptor_initWithIoCucumberDatatableTableTransformer_(self, transformer);
  return self;
}

- (IOSClass *)getOriginalTransformerType {
  return IoCucumberDatatableTableTransformer_class_();
}

- (id)transformWithJavaUtilList:(id<JavaUtilList>)raw {
  return [((id<IoCucumberDatatableTableTransformer>) nil_chk(transformer_)) transformWithIoCucumberDatatableDataTable:IoCucumberDatatableDataTable_createWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(raw, JreLoadStatic(IoCucumberDatatableDataTableType, CONVERSION_REQUIRED))];
}

- (void)dealloc {
  RELEASE_(transformer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableTableTransformer:);
  methods[1].selector = @selector(getOriginalTransformerType);
  methods[2].selector = @selector(transformWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "transformer_", "LIoCucumberDatatableTableTransformer;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LIoCucumberDatatableTableTransformer;", "(Lio/cucumber/datatable/TableTransformer<TT;>;)V", "()Ljava/lang/Class<*>;", "transform", "LJavaUtilList;", "LJavaLangThrowable;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)TT;", "Lio/cucumber/datatable/TableTransformer<TT;>;", "LIoCucumberDatatableDataTableType;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Lio/cucumber/datatable/DataTableType$RawTableTransformer<TT;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTableType_TableTransformerAdaptor = { "TableTransformerAdaptor", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0xa, 3, 1, 8, -1, -1, 9, -1 };
  return &_IoCucumberDatatableDataTableType_TableTransformerAdaptor;
}

@end

void IoCucumberDatatableDataTableType_TableTransformerAdaptor_initWithIoCucumberDatatableTableTransformer_(IoCucumberDatatableDataTableType_TableTransformerAdaptor *self, id<IoCucumberDatatableTableTransformer> transformer) {
  NSObject_init(self);
  if (transformer == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"transformer cannot be null");
  JreStrongAssign(&self->transformer_, transformer);
}

IoCucumberDatatableDataTableType_TableTransformerAdaptor *new_IoCucumberDatatableDataTableType_TableTransformerAdaptor_initWithIoCucumberDatatableTableTransformer_(id<IoCucumberDatatableTableTransformer> transformer) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTableType_TableTransformerAdaptor, initWithIoCucumberDatatableTableTransformer_, transformer)
}

IoCucumberDatatableDataTableType_TableTransformerAdaptor *create_IoCucumberDatatableDataTableType_TableTransformerAdaptor_initWithIoCucumberDatatableTableTransformer_(id<IoCucumberDatatableTableTransformer> transformer) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTableType_TableTransformerAdaptor, initWithIoCucumberDatatableTableTransformer_, transformer)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTableType_TableTransformerAdaptor)
