//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/DataTable.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/datatable/CucumberDataTableException.h"
#include "io/cucumber/datatable/DataTable.h"
#include "io/cucumber/datatable/TablePrinter.h"
#include "java/lang/Appendable.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/lang/reflect/TypeVariable.h"
#include "java/util/AbstractList.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/RandomAccess.h"

#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface IoCucumberDatatableDataTable () {
 @public
  id<JavaUtilList> raw_;
  id<IoCucumberDatatableDataTable_TableConverter> tableConverter_;
}

/*!
 @brief Creates a new DataTable.
 <p>
  To improve performance this constructor assumes the provided raw table
  is rectangular, free of null values, immutable and a safe copy.
 @param raw the underlying table
 @param tableConverter to transform the table
 @throw NullPointerExceptionif either raw or tableConverter is null
 */
- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)raw
withIoCucumberDatatableDataTable_TableConverter:(id<IoCucumberDatatableDataTable_TableConverter>)tableConverter;

+ (id<JavaUtilList>)copy__WithJavaUtilList:(id<JavaUtilList>)balanced OBJC_METHOD_FAMILY_NONE;

+ (id<JavaUtilList>)requireNonNullEntriesWithJavaUtilList:(id<JavaUtilList>)raw;

+ (id<JavaUtilList>)requireRectangularTableWithJavaUtilList:(id<JavaUtilList>)table;

+ (void)rangeCheckWithInt:(jint)index
                  withInt:(jint)size;

+ (void)rangeCheckRowWithInt:(jint)row
                     withInt:(jint)height;

+ (void)rangeCheckColumnWithInt:(jint)column
                        withInt:(jint)width;

@end

J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTable, raw_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(IoCucumberDatatableDataTable, tableConverter_, id<IoCucumberDatatableDataTable_TableConverter>)

__attribute__((unused)) static void IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(IoCucumberDatatableDataTable *self, id<JavaUtilList> raw, id<IoCucumberDatatableDataTable_TableConverter> tableConverter);

__attribute__((unused)) static IoCucumberDatatableDataTable *new_IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(id<JavaUtilList> raw, id<IoCucumberDatatableDataTable_TableConverter> tableConverter) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTable *create_IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(id<JavaUtilList> raw, id<IoCucumberDatatableDataTable_TableConverter> tableConverter);

__attribute__((unused)) static id<JavaUtilList> IoCucumberDatatableDataTable_copy__WithJavaUtilList_(id<JavaUtilList> balanced);

__attribute__((unused)) static id<JavaUtilList> IoCucumberDatatableDataTable_requireNonNullEntriesWithJavaUtilList_(id<JavaUtilList> raw);

__attribute__((unused)) static id<JavaUtilList> IoCucumberDatatableDataTable_requireRectangularTableWithJavaUtilList_(id<JavaUtilList> table);

__attribute__((unused)) static void IoCucumberDatatableDataTable_rangeCheckWithInt_withInt_(jint index, jint size);

__attribute__((unused)) static void IoCucumberDatatableDataTable_rangeCheckRowWithInt_withInt_(jint row, jint height);

__attribute__((unused)) static void IoCucumberDatatableDataTable_rangeCheckColumnWithInt_withInt_(jint column, jint width);

@interface IoCucumberDatatableDataTable_TableConverter : NSObject

@end

@interface IoCucumberDatatableDataTable_RawDataTableView : JavaUtilAbstractList < JavaUtilRandomAccess > {
 @public
  IoCucumberDatatableDataTable *this$0_;
  jint fromRow_;
  jint fromColumn_;
  jint toColumn_;
  jint toRow_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)outer$
                                                       withInt:(jint)fromRow
                                                       withInt:(jint)fromColumn
                                                       withInt:(jint)toColumn
                                                       withInt:(jint)toRow;

- (id<JavaUtilList>)getWithInt:(jint)row;

- (jint)size;

- (id<JavaUtilList>)removeWithInt:(jint)arg0;

- (id<JavaUtilList>)setWithInt:(jint)arg0
                        withId:(id<JavaUtilList>)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_RawDataTableView)

__attribute__((unused)) static void IoCucumberDatatableDataTable_RawDataTableView_initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_(IoCucumberDatatableDataTable_RawDataTableView *self, IoCucumberDatatableDataTable *outer$, jint fromRow, jint fromColumn, jint toColumn, jint toRow);

__attribute__((unused)) static IoCucumberDatatableDataTable_RawDataTableView *new_IoCucumberDatatableDataTable_RawDataTableView_initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_(IoCucumberDatatableDataTable *outer$, jint fromRow, jint fromColumn, jint toColumn, jint toRow) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTable_RawDataTableView *create_IoCucumberDatatableDataTable_RawDataTableView_initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_(IoCucumberDatatableDataTable *outer$, jint fromRow, jint fromColumn, jint toColumn, jint toRow);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTable_RawDataTableView)

@interface IoCucumberDatatableDataTable_RawDataTableView_1 : JavaUtilAbstractList {
 @public
  IoCucumberDatatableDataTable_RawDataTableView *this$0_;
  jint val$row_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable_RawDataTableView:(IoCucumberDatatableDataTable_RawDataTableView *)outer$
                                                                        withInt:(jint)capture$0;

- (NSString *)getWithInt:(jint)column;

- (jint)size;

- (NSString *)removeWithInt:(jint)arg0;

- (NSString *)setWithInt:(jint)arg0
                  withId:(NSString *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_RawDataTableView_1)

__attribute__((unused)) static void IoCucumberDatatableDataTable_RawDataTableView_1_initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_(IoCucumberDatatableDataTable_RawDataTableView_1 *self, IoCucumberDatatableDataTable_RawDataTableView *outer$, jint capture$0);

__attribute__((unused)) static IoCucumberDatatableDataTable_RawDataTableView_1 *new_IoCucumberDatatableDataTable_RawDataTableView_1_initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_(IoCucumberDatatableDataTable_RawDataTableView *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTable_RawDataTableView_1 *create_IoCucumberDatatableDataTable_RawDataTableView_1_initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_(IoCucumberDatatableDataTable_RawDataTableView *outer$, jint capture$0);

@interface IoCucumberDatatableDataTable_ListView : JavaUtilAbstractList {
 @public
  IoCucumberDatatableDataTable *this$0_;
  jint width_;
  jint height_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)outer$;

- (NSString *)getWithInt:(jint)index;

- (jint)size;

- (NSString *)removeWithInt:(jint)arg0;

- (NSString *)setWithInt:(jint)arg0
                  withId:(NSString *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_ListView)

__attribute__((unused)) static void IoCucumberDatatableDataTable_ListView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable_ListView *self, IoCucumberDatatableDataTable *outer$);

__attribute__((unused)) static IoCucumberDatatableDataTable_ListView *new_IoCucumberDatatableDataTable_ListView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTable_ListView *create_IoCucumberDatatableDataTable_ListView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTable_ListView)

@interface IoCucumberDatatableDataTable_ColumnView : JavaUtilAbstractList < JavaUtilRandomAccess > {
 @public
  IoCucumberDatatableDataTable *this$0_;
  jint column_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)outer$
                                                       withInt:(jint)column;

- (NSString *)getWithInt:(jint)row;

- (jint)size;

- (NSString *)removeWithInt:(jint)arg0;

- (NSString *)setWithInt:(jint)arg0
                  withId:(NSString *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_ColumnView)

__attribute__((unused)) static void IoCucumberDatatableDataTable_ColumnView_initWithIoCucumberDatatableDataTable_withInt_(IoCucumberDatatableDataTable_ColumnView *self, IoCucumberDatatableDataTable *outer$, jint column);

__attribute__((unused)) static IoCucumberDatatableDataTable_ColumnView *new_IoCucumberDatatableDataTable_ColumnView_initWithIoCucumberDatatableDataTable_withInt_(IoCucumberDatatableDataTable *outer$, jint column) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTable_ColumnView *create_IoCucumberDatatableDataTable_ColumnView_initWithIoCucumberDatatableDataTable_withInt_(IoCucumberDatatableDataTable *outer$, jint column);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTable_ColumnView)

@interface IoCucumberDatatableDataTable_TransposedRawDataTableView : JavaUtilAbstractList < JavaUtilRandomAccess > {
 @public
  IoCucumberDatatableDataTable *this$0_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)outer$;

- (IoCucumberDatatableDataTable *)dataTable;

- (id<JavaUtilList>)getWithInt:(jint)row;

- (jint)size;

- (id<JavaUtilList>)removeWithInt:(jint)arg0;

- (id<JavaUtilList>)setWithInt:(jint)arg0
                        withId:(id<JavaUtilList>)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_TransposedRawDataTableView)

__attribute__((unused)) static void IoCucumberDatatableDataTable_TransposedRawDataTableView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable_TransposedRawDataTableView *self, IoCucumberDatatableDataTable *outer$);

__attribute__((unused)) static IoCucumberDatatableDataTable_TransposedRawDataTableView *new_IoCucumberDatatableDataTable_TransposedRawDataTableView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTable_TransposedRawDataTableView *create_IoCucumberDatatableDataTable_TransposedRawDataTableView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable *outer$);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTable_TransposedRawDataTableView)

@interface IoCucumberDatatableDataTable_TransposedRawDataTableView_1 : JavaUtilAbstractList {
 @public
  IoCucumberDatatableDataTable_TransposedRawDataTableView *this$0_;
  jint val$row_;
}

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable_TransposedRawDataTableView:(IoCucumberDatatableDataTable_TransposedRawDataTableView *)outer$
                                                                                  withInt:(jint)capture$0;

- (NSString *)getWithInt:(jint)column;

- (jint)size;

- (NSString *)removeWithInt:(jint)arg0;

- (NSString *)setWithInt:(jint)arg0
                  withId:(NSString *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_TransposedRawDataTableView_1)

__attribute__((unused)) static void IoCucumberDatatableDataTable_TransposedRawDataTableView_1_initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_(IoCucumberDatatableDataTable_TransposedRawDataTableView_1 *self, IoCucumberDatatableDataTable_TransposedRawDataTableView *outer$, jint capture$0);

__attribute__((unused)) static IoCucumberDatatableDataTable_TransposedRawDataTableView_1 *new_IoCucumberDatatableDataTable_TransposedRawDataTableView_1_initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_(IoCucumberDatatableDataTable_TransposedRawDataTableView *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static IoCucumberDatatableDataTable_TransposedRawDataTableView_1 *create_IoCucumberDatatableDataTable_TransposedRawDataTableView_1_initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_(IoCucumberDatatableDataTable_TransposedRawDataTableView *outer$, jint capture$0);

@implementation IoCucumberDatatableDataTable

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)raw
withIoCucumberDatatableDataTable_TableConverter:(id<IoCucumberDatatableDataTable_TableConverter>)tableConverter {
  IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(self, raw, tableConverter);
  return self;
}

+ (IoCucumberDatatableDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw {
  return IoCucumberDatatableDataTable_createWithJavaUtilList_(raw);
}

+ (IoCucumberDatatableDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw
         withIoCucumberDatatableDataTable_TableConverter:(id<IoCucumberDatatableDataTable_TableConverter>)tableConverter {
  return IoCucumberDatatableDataTable_createWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(raw, tableConverter);
}

+ (id<JavaUtilList>)copy__WithJavaUtilList:(id<JavaUtilList>)balanced {
  return IoCucumberDatatableDataTable_copy__WithJavaUtilList_(balanced);
}

+ (id<JavaUtilList>)requireNonNullEntriesWithJavaUtilList:(id<JavaUtilList>)raw {
  return IoCucumberDatatableDataTable_requireNonNullEntriesWithJavaUtilList_(raw);
}

+ (id<JavaUtilList>)requireRectangularTableWithJavaUtilList:(id<JavaUtilList>)table {
  return IoCucumberDatatableDataTable_requireRectangularTableWithJavaUtilList_(table);
}

+ (IoCucumberDatatableDataTable *)emptyDataTable {
  return IoCucumberDatatableDataTable_emptyDataTable();
}

- (id<JavaUtilList>)asList {
  return create_IoCucumberDatatableDataTable_ListView_initWithIoCucumberDatatableDataTable_(self);
}

- (id<JavaUtilList>)asListWithJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  return [((id<IoCucumberDatatableDataTable_TableConverter>) nil_chk(tableConverter_)) toListWithIoCucumberDatatableDataTable:self withJavaLangReflectType:itemType];
}

- (id<JavaUtilList>)asLists {
  return [self cells];
}

- (id<JavaUtilList>)cells {
  return raw_;
}

- (id<JavaUtilList>)asListsWithJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  return [((id<IoCucumberDatatableDataTable_TableConverter>) nil_chk(tableConverter_)) toListsWithIoCucumberDatatableDataTable:self withJavaLangReflectType:itemType];
}

- (id<JavaUtilMap>)asMapWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                        withJavaLangReflectType:(id<JavaLangReflectType>)valueType {
  return [((id<IoCucumberDatatableDataTable_TableConverter>) nil_chk(tableConverter_)) toMapWithIoCucumberDatatableDataTable:self withJavaLangReflectType:keyType withJavaLangReflectType:valueType];
}

- (id<JavaUtilList>)asMaps {
  if ([((id<JavaUtilList>) nil_chk(raw_)) isEmpty]) return JavaUtilCollections_emptyList();
  id<JavaUtilList> headers = [raw_ getWithInt:0];
  id<JavaUtilList> headersAndRows = create_JavaUtilArrayList_init();
  for (jint i = 1; i < [raw_ size]; i++) {
    id<JavaUtilList> row = [raw_ getWithInt:i];
    JavaUtilLinkedHashMap *headersAndRow = create_JavaUtilLinkedHashMap_init();
    for (jint j = 0; j < [((id<JavaUtilList>) nil_chk(headers)) size]; j++) {
      NSString *replaced = [headersAndRow putWithId:[headers getWithInt:j] withId:[((id<JavaUtilList>) nil_chk(row)) getWithInt:j]];
      if (replaced != nil) {
        @throw nil_chk(IoCucumberDatatableCucumberDataTableException_duplicateKeyExceptionWithJavaLangReflectType_withJavaLangReflectType_withId_withId_withId_(NSString_class_(), NSString_class_(), [headers getWithInt:j], [row getWithInt:j], replaced));
      }
    }
    [headersAndRows addWithId:JavaUtilCollections_unmodifiableMapWithJavaUtilMap_(headersAndRow)];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(headersAndRows);
}

- (id<JavaUtilList>)asMapsWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                          withJavaLangReflectType:(id<JavaLangReflectType>)valueType {
  return [((id<IoCucumberDatatableDataTable_TableConverter>) nil_chk(tableConverter_)) toMapsWithIoCucumberDatatableDataTable:self withJavaLangReflectType:keyType withJavaLangReflectType:valueType];
}

- (NSString *)cellWithInt:(jint)row
                  withInt:(jint)column {
  IoCucumberDatatableDataTable_rangeCheckRowWithInt_withInt_(row, [self height]);
  IoCucumberDatatableDataTable_rangeCheckColumnWithInt_withInt_(column, [self width]);
  return [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(raw_)) getWithInt:row])) getWithInt:column];
}

+ (void)rangeCheckWithInt:(jint)index
                  withInt:(jint)size {
  IoCucumberDatatableDataTable_rangeCheckWithInt_withInt_(index, size);
}

+ (void)rangeCheckRowWithInt:(jint)row
                     withInt:(jint)height {
  IoCucumberDatatableDataTable_rangeCheckRowWithInt_withInt_(row, height);
}

+ (void)rangeCheckColumnWithInt:(jint)column
                        withInt:(jint)width {
  IoCucumberDatatableDataTable_rangeCheckColumnWithInt_withInt_(column, width);
}

- (id<JavaUtilList>)columnWithInt:(jint)column {
  return create_IoCucumberDatatableDataTable_ColumnView_initWithIoCucumberDatatableDataTable_withInt_(self, column);
}

- (IoCucumberDatatableDataTable *)columnsWithInt:(jint)fromColumn {
  return [self columnsWithInt:fromColumn withInt:[self width]];
}

- (IoCucumberDatatableDataTable *)columnsWithInt:(jint)fromColumn
                                         withInt:(jint)toColumn {
  return [self subTableWithInt:0 withInt:fromColumn withInt:[self height] withInt:toColumn];
}

- (id)convertWithJavaLangReflectType:(id<JavaLangReflectType>)type
                         withBoolean:(jboolean)transposed {
  return [((id<IoCucumberDatatableDataTable_TableConverter>) nil_chk(tableConverter_)) convertWithIoCucumberDatatableDataTable:self withJavaLangReflectType:type withBoolean:transposed];
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  IoCucumberDatatableDataTable *dataTable = (IoCucumberDatatableDataTable *) cast_chk(o, [IoCucumberDatatableDataTable class]);
  return [((id<JavaUtilList>) nil_chk(raw_)) isEqual:dataTable->raw_];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilList>) nil_chk(raw_)) hash]);
}

- (jboolean)isEmpty {
  return [((id<JavaUtilList>) nil_chk(raw_)) isEmpty];
}

- (id<JavaUtilList>)rowWithInt:(jint)row {
  IoCucumberDatatableDataTable_rangeCheckRowWithInt_withInt_(row, [self height]);
  return [((id<JavaUtilList>) nil_chk(raw_)) getWithInt:row];
}

- (IoCucumberDatatableDataTable *)rowsWithInt:(jint)fromRow {
  return [self rowsWithInt:fromRow withInt:[self height]];
}

- (IoCucumberDatatableDataTable *)rowsWithInt:(jint)fromRow
                                      withInt:(jint)toRow {
  return [self subTableWithInt:fromRow withInt:0 withInt:toRow withInt:[self width]];
}

- (IoCucumberDatatableDataTable *)subTableWithInt:(jint)fromRow
                                          withInt:(jint)fromColumn {
  return [self subTableWithInt:fromRow withInt:fromColumn withInt:[self height] withInt:[self width]];
}

- (IoCucumberDatatableDataTable *)subTableWithInt:(jint)fromRow
                                          withInt:(jint)fromColumn
                                          withInt:(jint)toRow
                                          withInt:(jint)toColumn {
  return create_IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(create_IoCucumberDatatableDataTable_RawDataTableView_initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_(self, fromRow, fromColumn, toColumn, toRow), tableConverter_);
}

- (jint)height {
  return [((id<JavaUtilList>) nil_chk(raw_)) size];
}

- (jint)width {
  return [((id<JavaUtilList>) nil_chk(raw_)) isEmpty] ? 0 : [((id<JavaUtilList>) nil_chk([raw_ getWithInt:0])) size];
}

- (NSString *)description {
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  [self printWithJavaLangStringBuilder:result];
  return [result description];
}

- (void)printWithJavaLangAppendable:(id<JavaLangAppendable>)appendable {
  IoCucumberDatatableTablePrinter *printer = create_IoCucumberDatatableTablePrinter_init();
  [printer printTableWithJavaUtilList:raw_ withJavaLangAppendable:appendable];
}

- (void)printWithJavaLangStringBuilder:(JavaLangStringBuilder *)appendable {
  IoCucumberDatatableTablePrinter *printer = create_IoCucumberDatatableTablePrinter_init();
  [printer printTableWithJavaUtilList:raw_ withJavaLangStringBuilder:appendable];
}

- (IoCucumberDatatableDataTable *)transpose {
  if ([raw_ isKindOfClass:[IoCucumberDatatableDataTable_TransposedRawDataTableView class]]) {
    IoCucumberDatatableDataTable_TransposedRawDataTableView *transposed = (IoCucumberDatatableDataTable_TransposedRawDataTableView *) cast_chk(self->raw_, [IoCucumberDatatableDataTable_TransposedRawDataTableView class]);
    return [((IoCucumberDatatableDataTable_TransposedRawDataTableView *) nil_chk(transposed)) dataTable];
  }
  return create_IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(create_IoCucumberDatatableDataTable_TransposedRawDataTableView_initWithIoCucumberDatatableDataTable_(self), tableConverter_);
}

- (void)dealloc {
  RELEASE_(raw_);
  RELEASE_(tableConverter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x9, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x9, 2, 0, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 6, 3, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 8, 3, -1, 7, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 9, 3, -1, 7, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 15, 12, -1, 16, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 20, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 21, 18, -1, 22, -1, -1 },
    { NULL, "LNSString;", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 25, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 26, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 27, 24, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 28, 29, -1, 30, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x1, 31, 29, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x1, 31, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 32, 33, -1, 34, -1, -1 },
    { NULL, "Z", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 37, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 38, 29, -1, 30, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x1, 39, 29, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x1, 39, 24, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x1, 40, 24, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 42, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, 45, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 46, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:withIoCucumberDatatableDataTable_TableConverter:);
  methods[1].selector = @selector(createWithJavaUtilList:);
  methods[2].selector = @selector(createWithJavaUtilList:withIoCucumberDatatableDataTable_TableConverter:);
  methods[3].selector = @selector(copy__WithJavaUtilList:);
  methods[4].selector = @selector(requireNonNullEntriesWithJavaUtilList:);
  methods[5].selector = @selector(requireRectangularTableWithJavaUtilList:);
  methods[6].selector = @selector(emptyDataTable);
  methods[7].selector = @selector(asList);
  methods[8].selector = @selector(asListWithJavaLangReflectType:);
  methods[9].selector = @selector(asLists);
  methods[10].selector = @selector(cells);
  methods[11].selector = @selector(asListsWithJavaLangReflectType:);
  methods[12].selector = @selector(asMapWithJavaLangReflectType:withJavaLangReflectType:);
  methods[13].selector = @selector(asMaps);
  methods[14].selector = @selector(asMapsWithJavaLangReflectType:withJavaLangReflectType:);
  methods[15].selector = @selector(cellWithInt:withInt:);
  methods[16].selector = @selector(rangeCheckWithInt:withInt:);
  methods[17].selector = @selector(rangeCheckRowWithInt:withInt:);
  methods[18].selector = @selector(rangeCheckColumnWithInt:withInt:);
  methods[19].selector = @selector(columnWithInt:);
  methods[20].selector = @selector(columnsWithInt:);
  methods[21].selector = @selector(columnsWithInt:withInt:);
  methods[22].selector = @selector(convertWithJavaLangReflectType:withBoolean:);
  methods[23].selector = @selector(isEqual:);
  methods[24].selector = @selector(hash);
  methods[25].selector = @selector(isEmpty);
  methods[26].selector = @selector(rowWithInt:);
  methods[27].selector = @selector(rowsWithInt:);
  methods[28].selector = @selector(rowsWithInt:withInt:);
  methods[29].selector = @selector(subTableWithInt:withInt:);
  methods[30].selector = @selector(subTableWithInt:withInt:withInt:withInt:);
  methods[31].selector = @selector(height);
  methods[32].selector = @selector(width);
  methods[33].selector = @selector(description);
  methods[34].selector = @selector(printWithJavaLangAppendable:);
  methods[35].selector = @selector(printWithJavaLangStringBuilder:);
  methods[36].selector = @selector(transpose);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "raw_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 47, -1 },
    { "tableConverter_", "LIoCucumberDatatableDataTable_TableConverter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;LIoCucumberDatatableDataTable_TableConverter;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;Lio/cucumber/datatable/DataTable$TableConverter;)V", "create", "LJavaUtilList;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)Lio/cucumber/datatable/DataTable;", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;Lio/cucumber/datatable/DataTable$TableConverter;)Lio/cucumber/datatable/DataTable;", "copy", "(Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;)Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;", "requireNonNullEntries", "requireRectangularTable", "()Ljava/util/List<Ljava/lang/String;>;", "asList", "LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Ljava/lang/reflect/Type;)Ljava/util/List<TT;>;", "()Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;", "asLists", "<T:Ljava/lang/Object;>(Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/List<TT;>;>;", "asMap", "LJavaLangReflectType;LJavaLangReflectType;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/Map<TK;TV;>;", "()Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;>;", "asMaps", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/Map<TK;TV;>;>;", "cell", "II", "rangeCheck", "rangeCheckRow", "rangeCheckColumn", "column", "I", "(I)Ljava/util/List<Ljava/lang/String;>;", "columns", "convert", "LJavaLangReflectType;Z", "<T:Ljava/lang/Object;>(Ljava/lang/reflect/Type;Z)TT;", "equals", "LNSObject;", "hashCode", "row", "rows", "subTable", "IIII", "toString", "print", "LJavaLangAppendable;", "LJavaIoIOException;", "LJavaLangStringBuilder;", "Ljava/util/List<Ljava/util/List<Ljava/lang/String;>;>;", "LIoCucumberDatatableDataTable_TableConverter;LIoCucumberDatatableDataTable_AbstractTableConverter;LIoCucumberDatatableDataTable_NoConverterDefined;LIoCucumberDatatableDataTable_RawDataTableView;LIoCucumberDatatableDataTable_ListView;LIoCucumberDatatableDataTable_ColumnView;LIoCucumberDatatableDataTable_TransposedRawDataTableView;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable = { "DataTable", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x11, 37, 2, -1, 48, -1, -1, -1 };
  return &_IoCucumberDatatableDataTable;
}

@end

void IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(IoCucumberDatatableDataTable *self, id<JavaUtilList> raw, id<IoCucumberDatatableDataTable_TableConverter> tableConverter) {
  NSObject_init(self);
  if (raw == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"cells can not be null");
  if (tableConverter == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"tableConverter can not be null");
  JreStrongAssign(&self->raw_, raw);
  JreStrongAssign(&self->tableConverter_, tableConverter);
}

IoCucumberDatatableDataTable *new_IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(id<JavaUtilList> raw, id<IoCucumberDatatableDataTable_TableConverter> tableConverter) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTable, initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_, raw, tableConverter)
}

IoCucumberDatatableDataTable *create_IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(id<JavaUtilList> raw, id<IoCucumberDatatableDataTable_TableConverter> tableConverter) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTable, initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_, raw, tableConverter)
}

IoCucumberDatatableDataTable *IoCucumberDatatableDataTable_createWithJavaUtilList_(id<JavaUtilList> raw) {
  IoCucumberDatatableDataTable_initialize();
  return IoCucumberDatatableDataTable_createWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(raw, create_IoCucumberDatatableDataTable_NoConverterDefined_init());
}

IoCucumberDatatableDataTable *IoCucumberDatatableDataTable_createWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(id<JavaUtilList> raw, id<IoCucumberDatatableDataTable_TableConverter> tableConverter) {
  IoCucumberDatatableDataTable_initialize();
  return create_IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(IoCucumberDatatableDataTable_copy__WithJavaUtilList_(IoCucumberDatatableDataTable_requireNonNullEntriesWithJavaUtilList_(IoCucumberDatatableDataTable_requireRectangularTableWithJavaUtilList_(raw))), tableConverter);
}

id<JavaUtilList> IoCucumberDatatableDataTable_copy__WithJavaUtilList_(id<JavaUtilList> balanced) {
  IoCucumberDatatableDataTable_initialize();
  id<JavaUtilList> rawCopy = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(balanced)) size]);
  for (id<JavaUtilList> __strong row in balanced) {
    if ([((id<JavaUtilList>) nil_chk(row)) isEmpty]) {
      return JavaUtilCollections_emptyList();
    }
    id<JavaUtilList> rowCopy = create_JavaUtilArrayList_initWithInt_([row size]);
    [rowCopy addAllWithJavaUtilCollection:row];
    [rawCopy addWithId:JavaUtilCollections_unmodifiableListWithJavaUtilList_(rowCopy)];
  }
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(rawCopy);
}

id<JavaUtilList> IoCucumberDatatableDataTable_requireNonNullEntriesWithJavaUtilList_(id<JavaUtilList> raw) {
  IoCucumberDatatableDataTable_initialize();
  jint rowIndex = 0;
  for (id<JavaUtilList> __strong row in nil_chk(raw)) {
    jint columnIndex = [((id<JavaUtilList>) nil_chk(row)) indexOfWithId:nil];
    if (columnIndex >= 0) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I", @"raw contained null at row: ", rowIndex, @" column: ", columnIndex));
    }
    rowIndex++;
  }
  return raw;
}

id<JavaUtilList> IoCucumberDatatableDataTable_requireRectangularTableWithJavaUtilList_(id<JavaUtilList> table) {
  IoCucumberDatatableDataTable_initialize();
  jint columns = [((id<JavaUtilList>) nil_chk(table)) isEmpty] ? 0 : [((id<JavaUtilList>) nil_chk([table getWithInt:0])) size];
  for (id<JavaUtilList> __strong row in table) {
    if (columns != [((id<JavaUtilList>) nil_chk(row)) size]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Table is not rectangular: expected %s column(s) but found %s.", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(columns), JavaLangInteger_valueOfWithInt_([row size]) } count:2 type:NSObject_class_()]));
    }
  }
  return table;
}

IoCucumberDatatableDataTable *IoCucumberDatatableDataTable_emptyDataTable() {
  IoCucumberDatatableDataTable_initialize();
  return create_IoCucumberDatatableDataTable_initWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(JavaUtilCollections_emptyList(), create_IoCucumberDatatableDataTable_NoConverterDefined_init());
}

void IoCucumberDatatableDataTable_rangeCheckWithInt_withInt_(jint index, jint size) {
  IoCucumberDatatableDataTable_initialize();
  if (index < 0 || index >= size) @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"index: ", index, @", Size: ", size));
}

void IoCucumberDatatableDataTable_rangeCheckRowWithInt_withInt_(jint row, jint height) {
  IoCucumberDatatableDataTable_initialize();
  if (row < 0 || row >= height) @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"row: ", row, @", Height: ", height));
}

void IoCucumberDatatableDataTable_rangeCheckColumnWithInt_withInt_(jint column, jint width) {
  IoCucumberDatatableDataTable_initialize();
  if (column < 0 || column >= width) @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"column: ", column, @", Width: ", width));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTable)

@implementation IoCucumberDatatableDataTable_TableConverter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x401, 0, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 5, 1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 7, 1, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, 12, 10, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(convertWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[1].selector = @selector(convertWithIoCucumberDatatableDataTable:withJavaLangReflectType:withBoolean:);
  methods[2].selector = @selector(toListWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[3].selector = @selector(toListsWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[4].selector = @selector(toMapWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:);
  methods[5].selector = @selector(toMapsWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convert", "LIoCucumberDatatableDataTable;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)TT;", "LIoCucumberDatatableDataTable;LJavaLangReflectType;Z", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Z)TT;", "toList", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)Ljava/util/List<TT;>;", "toLists", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/List<TT;>;>;", "toMap", "LIoCucumberDatatableDataTable;LJavaLangReflectType;LJavaLangReflectType;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/Map<TK;TV;>;", "toMaps", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/Map<TK;TV;>;>;", "LIoCucumberDatatableDataTable;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_TableConverter = { "TableConverter", "io.cucumber.datatable", ptrTable, methods, NULL, 7, 0x609, 6, 0, 14, -1, -1, -1, -1 };
  return &_IoCucumberDatatableDataTable_TableConverter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTable_TableConverter)

@implementation IoCucumberDatatableDataTable_AbstractTableConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberDatatableDataTable_AbstractTableConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaLangReflectType>)listItemTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return IoCucumberDatatableDataTable_AbstractTableConverter_listItemTypeWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)typeArgWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                             withIOSClass:(IOSClass *)wantedRawType
                                                  withInt:(jint)index {
  return IoCucumberDatatableDataTable_AbstractTableConverter_typeArgWithJavaLangReflectType_withIOSClass_withInt_(type, wantedRawType, index);
}

+ (id<JavaLangReflectType>)mapKeyTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return IoCucumberDatatableDataTable_AbstractTableConverter_mapKeyTypeWithJavaLangReflectType_(type);
}

+ (id<JavaLangReflectType>)mapValueTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type {
  return IoCucumberDatatableDataTable_AbstractTableConverter_mapValueTypeWithJavaLangReflectType_(type);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 5, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 6, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(listItemTypeWithJavaLangReflectType:);
  methods[2].selector = @selector(typeArgWithJavaLangReflectType:withIOSClass:withInt:);
  methods[3].selector = @selector(mapKeyTypeWithJavaLangReflectType:);
  methods[4].selector = @selector(mapValueTypeWithJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "listItemType", "LJavaLangReflectType;", "typeArg", "LJavaLangReflectType;LIOSClass;I", "(Ljava/lang/reflect/Type;Ljava/lang/Class<*>;I)Ljava/lang/reflect/Type;", "mapKeyType", "mapValueType", "LIoCucumberDatatableDataTable;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_AbstractTableConverter = { "AbstractTableConverter", "io.cucumber.datatable", ptrTable, methods, NULL, 7, 0x408, 5, 0, 7, -1, -1, -1, -1 };
  return &_IoCucumberDatatableDataTable_AbstractTableConverter;
}

@end

void IoCucumberDatatableDataTable_AbstractTableConverter_init(IoCucumberDatatableDataTable_AbstractTableConverter *self) {
  NSObject_init(self);
}

id<JavaLangReflectType> IoCucumberDatatableDataTable_AbstractTableConverter_listItemTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  IoCucumberDatatableDataTable_AbstractTableConverter_initialize();
  return IoCucumberDatatableDataTable_AbstractTableConverter_typeArgWithJavaLangReflectType_withIOSClass_withInt_(type, JavaUtilList_class_(), 0);
}

id<JavaLangReflectType> IoCucumberDatatableDataTable_AbstractTableConverter_typeArgWithJavaLangReflectType_withIOSClass_withInt_(id<JavaLangReflectType> type, IOSClass *wantedRawType, jint index) {
  IoCucumberDatatableDataTable_AbstractTableConverter_initialize();
  if ([JavaLangReflectParameterizedType_class_() isInstance:type]) {
    id<JavaLangReflectParameterizedType> parameterizedType = (id<JavaLangReflectParameterizedType>) cast_check(type, JavaLangReflectParameterizedType_class_());
    id<JavaLangReflectType> rawType = [((id<JavaLangReflectParameterizedType>) nil_chk(parameterizedType)) getRawType];
    if ([rawType isKindOfClass:[IOSClass class]] && [((IOSClass *) nil_chk(wantedRawType)) isAssignableFrom:(IOSClass *) cast_chk(rawType, [IOSClass class])]) {
      id<JavaLangReflectType> result = IOSObjectArray_Get(nil_chk([parameterizedType getActualTypeArguments]), index);
      if ([JavaLangReflectTypeVariable_class_() isInstance:result]) {
        @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(@"Generic types must be explicit");
      }
      return result;
    }
    else {
      return nil;
    }
  }
  return nil;
}

id<JavaLangReflectType> IoCucumberDatatableDataTable_AbstractTableConverter_mapKeyTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  IoCucumberDatatableDataTable_AbstractTableConverter_initialize();
  return IoCucumberDatatableDataTable_AbstractTableConverter_typeArgWithJavaLangReflectType_withIOSClass_withInt_(type, JavaUtilMap_class_(), 0);
}

id<JavaLangReflectType> IoCucumberDatatableDataTable_AbstractTableConverter_mapValueTypeWithJavaLangReflectType_(id<JavaLangReflectType> type) {
  IoCucumberDatatableDataTable_AbstractTableConverter_initialize();
  return IoCucumberDatatableDataTable_AbstractTableConverter_typeArgWithJavaLangReflectType_withIOSClass_withInt_(type, JavaUtilMap_class_(), 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTable_AbstractTableConverter)

@implementation IoCucumberDatatableDataTable_NoConverterDefined

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberDatatableDataTable_NoConverterDefined_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type {
  return [self convertWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:type withBoolean:false];
}

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type
                                  withBoolean:(jboolean)transposed {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to %s. DataTable was created without a converter", [IOSObjectArray arrayWithObjects:(id[]){ type } count:1 type:NSObject_class_()]));
}

- (id<JavaUtilList>)toListWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<%s>. DataTable was created without a converter", [IOSObjectArray arrayWithObjects:(id[]){ itemType } count:1 type:NSObject_class_()]));
}

- (id<JavaUtilList>)toListsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                    withJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<List<%s>>. DataTable was created without a converter", [IOSObjectArray arrayWithObjects:(id[]){ itemType } count:1 type:NSObject_class_()]));
}

- (id<JavaUtilMap>)toMapWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                 withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                 withJavaLangReflectType:(id<JavaLangReflectType>)valueType {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to Map<%s,%s>. DataTable was created without a converter", [IOSObjectArray arrayWithObjects:(id[]){ keyType, valueType } count:2 type:NSObject_class_()]));
}

- (id<JavaUtilList>)toMapsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaLangReflectType:(id<JavaLangReflectType>)valueType {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<Map<%s,%s>>. DataTable was created without a converter", [IOSObjectArray arrayWithObjects:(id[]){ keyType, valueType } count:2 type:NSObject_class_()]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 5, 1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 7, 1, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 10, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[2].selector = @selector(convertWithIoCucumberDatatableDataTable:withJavaLangReflectType:withBoolean:);
  methods[3].selector = @selector(toListWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[4].selector = @selector(toListsWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[5].selector = @selector(toMapWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:);
  methods[6].selector = @selector(toMapsWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convert", "LIoCucumberDatatableDataTable;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)TT;", "LIoCucumberDatatableDataTable;LJavaLangReflectType;Z", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Z)TT;", "toList", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)Ljava/util/List<TT;>;", "toLists", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/List<TT;>;>;", "toMap", "LIoCucumberDatatableDataTable;LJavaLangReflectType;LJavaLangReflectType;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/Map<TK;TV;>;", "toMaps", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/Map<TK;TV;>;>;", "LIoCucumberDatatableDataTable;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_NoConverterDefined = { "NoConverterDefined", "io.cucumber.datatable", ptrTable, methods, NULL, 7, 0x18, 7, 0, 14, -1, -1, -1, -1 };
  return &_IoCucumberDatatableDataTable_NoConverterDefined;
}

@end

void IoCucumberDatatableDataTable_NoConverterDefined_init(IoCucumberDatatableDataTable_NoConverterDefined *self) {
  NSObject_init(self);
}

IoCucumberDatatableDataTable_NoConverterDefined *new_IoCucumberDatatableDataTable_NoConverterDefined_init() {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTable_NoConverterDefined, init)
}

IoCucumberDatatableDataTable_NoConverterDefined *create_IoCucumberDatatableDataTable_NoConverterDefined_init() {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTable_NoConverterDefined, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTable_NoConverterDefined)

@implementation IoCucumberDatatableDataTable_RawDataTableView

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)outer$
                                                       withInt:(jint)fromRow
                                                       withInt:(jint)fromColumn
                                                       withInt:(jint)toColumn
                                                       withInt:(jint)toRow {
  IoCucumberDatatableDataTable_RawDataTableView_initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_(self, outer$, fromRow, fromColumn, toColumn, toRow);
  return self;
}

- (id<JavaUtilList>)getWithInt:(jint)row {
  IoCucumberDatatableDataTable_rangeCheckRowWithInt_withInt_(row, [self size]);
  return create_IoCucumberDatatableDataTable_RawDataTableView_1_initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_(self, row);
}

- (jint)size {
  return fromColumn_ == toColumn_ ? 0 : toRow_ - fromRow_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableDataTable:withInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoCucumberDatatableDataTable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "fromRow_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fromColumn_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "toColumn_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "toRow_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIII", "get", "I", "(I)Ljava/util/List<Ljava/lang/String;>;", "LIoCucumberDatatableDataTable;", "Ljava/util/AbstractList<Ljava/util/List<Ljava/lang/String;>;>;Ljava/util/RandomAccess;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_RawDataTableView = { "RawDataTableView", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x12, 3, 5, 4, -1, -1, 5, -1 };
  return &_IoCucumberDatatableDataTable_RawDataTableView;
}

@end

void IoCucumberDatatableDataTable_RawDataTableView_initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_(IoCucumberDatatableDataTable_RawDataTableView *self, IoCucumberDatatableDataTable *outer$, jint fromRow, jint fromColumn, jint toColumn, jint toRow) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilAbstractList_init(self);
  if (fromRow < 0) @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"fromRow: ", fromRow));
  if (fromColumn < 0) @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I", @"fromColumn: ", fromColumn));
  if (toRow > [outer$ height]) @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"toRow: ", toRow, @", Height: ", [outer$ height]));
  if (toColumn > [outer$ width]) @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"toColumn: ", toColumn, @", Width: ", [outer$ width]));
  if (fromRow > toRow) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"fromRow(", fromRow, @") > toRow(", toRow, ')'));
  if (fromColumn > toColumn) @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$IC", @"fromColumn(", fromColumn, @") > toColumn(", toColumn, ')'));
  self->fromRow_ = fromRow;
  self->fromColumn_ = fromColumn;
  self->toColumn_ = toColumn;
  self->toRow_ = toRow;
}

IoCucumberDatatableDataTable_RawDataTableView *new_IoCucumberDatatableDataTable_RawDataTableView_initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_(IoCucumberDatatableDataTable *outer$, jint fromRow, jint fromColumn, jint toColumn, jint toRow) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTable_RawDataTableView, initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_, outer$, fromRow, fromColumn, toColumn, toRow)
}

IoCucumberDatatableDataTable_RawDataTableView *create_IoCucumberDatatableDataTable_RawDataTableView_initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_(IoCucumberDatatableDataTable *outer$, jint fromRow, jint fromColumn, jint toColumn, jint toRow) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTable_RawDataTableView, initWithIoCucumberDatatableDataTable_withInt_withInt_withInt_withInt_, outer$, fromRow, fromColumn, toColumn, toRow)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTable_RawDataTableView)

@implementation IoCucumberDatatableDataTable_RawDataTableView_1

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable_RawDataTableView:(IoCucumberDatatableDataTable_RawDataTableView *)outer$
                                                                        withInt:(jint)capture$0 {
  IoCucumberDatatableDataTable_RawDataTableView_1_initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_(self, outer$, capture$0);
  return self;
}

- (NSString *)getWithInt:(jint)column {
  IoCucumberDatatableDataTable_rangeCheckColumnWithInt_withInt_(column, [self size]);
  return [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(this$0_->this$0_->raw_)) getWithInt:this$0_->fromRow_ + val$row_])) getWithInt:this$0_->fromColumn_ + column];
}

- (jint)size {
  return this$0_->toColumn_ - this$0_->fromColumn_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableDataTable_RawDataTableView:withInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoCucumberDatatableDataTable_RawDataTableView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$row_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "I", "LIoCucumberDatatableDataTable_RawDataTableView;", "getWithInt:", "Ljava/util/AbstractList<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_RawDataTableView_1 = { "", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x8018, 3, 2, 2, -1, 3, 4, -1 };
  return &_IoCucumberDatatableDataTable_RawDataTableView_1;
}

@end

void IoCucumberDatatableDataTable_RawDataTableView_1_initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_(IoCucumberDatatableDataTable_RawDataTableView_1 *self, IoCucumberDatatableDataTable_RawDataTableView *outer$, jint capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$row_ = capture$0;
  JavaUtilAbstractList_init(self);
}

IoCucumberDatatableDataTable_RawDataTableView_1 *new_IoCucumberDatatableDataTable_RawDataTableView_1_initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_(IoCucumberDatatableDataTable_RawDataTableView *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTable_RawDataTableView_1, initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_, outer$, capture$0)
}

IoCucumberDatatableDataTable_RawDataTableView_1 *create_IoCucumberDatatableDataTable_RawDataTableView_1_initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_(IoCucumberDatatableDataTable_RawDataTableView *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTable_RawDataTableView_1, initWithIoCucumberDatatableDataTable_RawDataTableView_withInt_, outer$, capture$0)
}

@implementation IoCucumberDatatableDataTable_ListView

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)outer$ {
  IoCucumberDatatableDataTable_ListView_initWithIoCucumberDatatableDataTable_(self, outer$);
  return self;
}

- (NSString *)getWithInt:(jint)index {
  IoCucumberDatatableDataTable_rangeCheckWithInt_withInt_(index, [self size]);
  return [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(this$0_->raw_)) getWithInt:index / width_])) getWithInt:index % width_];
}

- (jint)size {
  return height_ * width_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableDataTable:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoCucumberDatatableDataTable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "I", "LIoCucumberDatatableDataTable;", "Ljava/util/AbstractList<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_ListView = { "ListView", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x12, 3, 3, 2, -1, -1, 3, -1 };
  return &_IoCucumberDatatableDataTable_ListView;
}

@end

void IoCucumberDatatableDataTable_ListView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable_ListView *self, IoCucumberDatatableDataTable *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilAbstractList_init(self);
  self->width_ = [outer$ width];
  self->height_ = [outer$ height];
}

IoCucumberDatatableDataTable_ListView *new_IoCucumberDatatableDataTable_ListView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable *outer$) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTable_ListView, initWithIoCucumberDatatableDataTable_, outer$)
}

IoCucumberDatatableDataTable_ListView *create_IoCucumberDatatableDataTable_ListView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable *outer$) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTable_ListView, initWithIoCucumberDatatableDataTable_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTable_ListView)

@implementation IoCucumberDatatableDataTable_ColumnView

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)outer$
                                                       withInt:(jint)column {
  IoCucumberDatatableDataTable_ColumnView_initWithIoCucumberDatatableDataTable_withInt_(self, outer$, column);
  return self;
}

- (NSString *)getWithInt:(jint)row {
  IoCucumberDatatableDataTable_rangeCheckRowWithInt_withInt_(row, [self size]);
  return [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(this$0_->raw_)) getWithInt:row])) getWithInt:column_];
}

- (jint)size {
  return [this$0_ height];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableDataTable:withInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoCucumberDatatableDataTable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "column_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "get", "LIoCucumberDatatableDataTable;", "Ljava/util/AbstractList<Ljava/lang/String;>;Ljava/util/RandomAccess;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_ColumnView = { "ColumnView", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x12, 3, 2, 2, -1, -1, 3, -1 };
  return &_IoCucumberDatatableDataTable_ColumnView;
}

@end

void IoCucumberDatatableDataTable_ColumnView_initWithIoCucumberDatatableDataTable_withInt_(IoCucumberDatatableDataTable_ColumnView *self, IoCucumberDatatableDataTable *outer$, jint column) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilAbstractList_init(self);
  IoCucumberDatatableDataTable_rangeCheckColumnWithInt_withInt_(column, [outer$ width]);
  self->column_ = column;
}

IoCucumberDatatableDataTable_ColumnView *new_IoCucumberDatatableDataTable_ColumnView_initWithIoCucumberDatatableDataTable_withInt_(IoCucumberDatatableDataTable *outer$, jint column) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTable_ColumnView, initWithIoCucumberDatatableDataTable_withInt_, outer$, column)
}

IoCucumberDatatableDataTable_ColumnView *create_IoCucumberDatatableDataTable_ColumnView_initWithIoCucumberDatatableDataTable_withInt_(IoCucumberDatatableDataTable *outer$, jint column) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTable_ColumnView, initWithIoCucumberDatatableDataTable_withInt_, outer$, column)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTable_ColumnView)

@implementation IoCucumberDatatableDataTable_TransposedRawDataTableView

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)outer$ {
  IoCucumberDatatableDataTable_TransposedRawDataTableView_initWithIoCucumberDatatableDataTable_(self, outer$);
  return self;
}

- (IoCucumberDatatableDataTable *)dataTable {
  return this$0_;
}

- (id<JavaUtilList>)getWithInt:(jint)row {
  IoCucumberDatatableDataTable_rangeCheckRowWithInt_withInt_(row, [self size]);
  return create_IoCucumberDatatableDataTable_TransposedRawDataTableView_1_initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_(self, row);
}

- (jint)size {
  return [this$0_ width];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIoCucumberDatatableDataTable;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableDataTable:);
  methods[1].selector = @selector(dataTable);
  methods[2].selector = @selector(getWithInt:);
  methods[3].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoCucumberDatatableDataTable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "I", "(I)Ljava/util/List<Ljava/lang/String;>;", "LIoCucumberDatatableDataTable;", "Ljava/util/AbstractList<Ljava/util/List<Ljava/lang/String;>;>;Ljava/util/RandomAccess;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_TransposedRawDataTableView = { "TransposedRawDataTableView", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x12, 4, 1, 3, -1, -1, 4, -1 };
  return &_IoCucumberDatatableDataTable_TransposedRawDataTableView;
}

@end

void IoCucumberDatatableDataTable_TransposedRawDataTableView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable_TransposedRawDataTableView *self, IoCucumberDatatableDataTable *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  JavaUtilAbstractList_init(self);
}

IoCucumberDatatableDataTable_TransposedRawDataTableView *new_IoCucumberDatatableDataTable_TransposedRawDataTableView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable *outer$) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTable_TransposedRawDataTableView, initWithIoCucumberDatatableDataTable_, outer$)
}

IoCucumberDatatableDataTable_TransposedRawDataTableView *create_IoCucumberDatatableDataTable_TransposedRawDataTableView_initWithIoCucumberDatatableDataTable_(IoCucumberDatatableDataTable *outer$) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTable_TransposedRawDataTableView, initWithIoCucumberDatatableDataTable_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableDataTable_TransposedRawDataTableView)

@implementation IoCucumberDatatableDataTable_TransposedRawDataTableView_1

- (instancetype __nonnull)initWithIoCucumberDatatableDataTable_TransposedRawDataTableView:(IoCucumberDatatableDataTable_TransposedRawDataTableView *)outer$
                                                                                  withInt:(jint)capture$0 {
  IoCucumberDatatableDataTable_TransposedRawDataTableView_1_initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_(self, outer$, capture$0);
  return self;
}

- (NSString *)getWithInt:(jint)column {
  IoCucumberDatatableDataTable_rangeCheckColumnWithInt_withInt_(column, [self size]);
  return [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(this$0_->this$0_->raw_)) getWithInt:column])) getWithInt:val$row_];
}

- (jint)size {
  return [this$0_->this$0_ height];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIoCucumberDatatableDataTable_TransposedRawDataTableView:withInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LIoCucumberDatatableDataTable_TransposedRawDataTableView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$row_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "I", "LIoCucumberDatatableDataTable_TransposedRawDataTableView;", "getWithInt:", "Ljava/util/AbstractList<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableDataTable_TransposedRawDataTableView_1 = { "", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x8018, 3, 2, 2, -1, 3, 4, -1 };
  return &_IoCucumberDatatableDataTable_TransposedRawDataTableView_1;
}

@end

void IoCucumberDatatableDataTable_TransposedRawDataTableView_1_initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_(IoCucumberDatatableDataTable_TransposedRawDataTableView_1 *self, IoCucumberDatatableDataTable_TransposedRawDataTableView *outer$, jint capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  self->val$row_ = capture$0;
  JavaUtilAbstractList_init(self);
}

IoCucumberDatatableDataTable_TransposedRawDataTableView_1 *new_IoCucumberDatatableDataTable_TransposedRawDataTableView_1_initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_(IoCucumberDatatableDataTable_TransposedRawDataTableView *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(IoCucumberDatatableDataTable_TransposedRawDataTableView_1, initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_, outer$, capture$0)
}

IoCucumberDatatableDataTable_TransposedRawDataTableView_1 *create_IoCucumberDatatableDataTable_TransposedRawDataTableView_1_initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_(IoCucumberDatatableDataTable_TransposedRawDataTableView *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableDataTable_TransposedRawDataTableView_1, initWithIoCucumberDatatableDataTable_TransposedRawDataTableView_withInt_, outer$, capture$0)
}
