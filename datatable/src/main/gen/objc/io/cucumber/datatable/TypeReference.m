//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/TypeReference.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/datatable/CucumberDataTableException.h"
#include "io/cucumber/datatable/TypeReference.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"

@interface IoCucumberDatatableTypeReference () {
 @public
  id<JavaLangReflectType> type_;
}

@end

J2OBJC_FIELD_SETTER(IoCucumberDatatableTypeReference, type_, id<JavaLangReflectType>)

@implementation IoCucumberDatatableTypeReference

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberDatatableTypeReference_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaLangReflectType>)getType {
  return self->type_;
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LJavaLangReflectType;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _IoCucumberDatatableTypeReference = { "TypeReference", "io.cucumber.datatable", ptrTable, methods, fields, 7, 0x401, 2, 1, -1, -1, -1, 0, -1 };
  return &_IoCucumberDatatableTypeReference;
}

@end

void IoCucumberDatatableTypeReference_init(IoCucumberDatatableTypeReference *self) {
  NSObject_init(self);
  id<JavaLangReflectType> superclass_ = [[self java_getClass] getGenericSuperclass];
  if ([superclass_ isKindOfClass:[IOSClass class]]) {
    @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(JreStrcat("$@", @"Missing type parameter: ", superclass_));
  }
  JreStrongAssign(&self->type_, IOSObjectArray_Get(nil_chk([((id<JavaLangReflectParameterizedType>) nil_chk(((id<JavaLangReflectParameterizedType>) cast_check(superclass_, JavaLangReflectParameterizedType_class_())))) getActualTypeArguments]), 0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableTypeReference)
