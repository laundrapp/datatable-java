//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/DataTable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IoCucumberDatatableDataTable")
#ifdef RESTRICT_IoCucumberDatatableDataTable
#define INCLUDE_ALL_IoCucumberDatatableDataTable 0
#else
#define INCLUDE_ALL_IoCucumberDatatableDataTable 1
#endif
#undef RESTRICT_IoCucumberDatatableDataTable
#ifdef INCLUDE_IoCucumberDatatableDataTable_NoConverterDefined
#define INCLUDE_IoCucumberDatatableDataTable_TableConverter 1
#endif
#ifdef INCLUDE_IoCucumberDatatableDataTable_AbstractTableConverter
#define INCLUDE_IoCucumberDatatableDataTable_TableConverter 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (IoCucumberDatatableDataTable_) && (INCLUDE_ALL_IoCucumberDatatableDataTable || defined(INCLUDE_IoCucumberDatatableDataTable))
#define IoCucumberDatatableDataTable_

@class JavaLangStringBuilder;
@protocol IoCucumberDatatableDataTable_TableConverter;
@protocol JavaLangAppendable;
@protocol JavaLangReflectType;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief A m-by-n table of string values.For example: 
 <p>
  @code

  |     | firstName   | lastName | birthDate  |
  | 4a1 | Annie M.
 G. | Schmidt  | 1911-03-20 |
  | c92 | Roald       | Dahl     | 1916-09-13 | 
  
@endcode
  <p>
  A table is either empty or  contains one or more cells. As
  such if a table has zero height it must have zero width and
  vise versa. 
 <p>
  The first row of the the table may be referred to as the
  table header. The remaining cells as the table body. 
 <p>
  A table can be converted into an objects of an arbitrary
  type by a <code>TableConverter</code>. A table created without
  a table converter will throw a <code>NoConverterDefined</code>
  exception when doing so. 
 <p>
  A DataTable is immutable and thread safe.
 */
@interface IoCucumberDatatableDataTable : NSObject

#pragma mark Public

/*!
 @brief Returns a list view on the table.Contains the cells ordered from
  left to right, top to bottom starting at the top left.
 @return the cells of the table
 */
- (id<JavaUtilList>)asList;

/*!
 @brief Converts the table to a list of <code>itemType</code>.
 @param itemType the type of the list items
 @return a List of objects
 */
- (id<JavaUtilList>)asListWithJavaLangReflectType:(id<JavaLangReflectType>)itemType;

/*!
 @brief Returns the cells of the table.
 @return the cells of the table
 */
- (id<JavaUtilList>)asLists;

/*!
 @brief Converts the table to a list of lists of <code>itemType</code>.
 @param itemType the type of the list items
 @return a list of list of objects
 */
- (id<JavaUtilList>)asListsWithJavaLangReflectType:(id<JavaLangReflectType>)itemType;

/*!
 @brief Converts the table to a single map of <code>keyType</code> to <code>valueType</code>.
 <p>
  For each row the first cell is used to create the key value. The
  remaining cells are used to create the value. If the table only has a single
  column that value is null.
 @param keyType key type
 @param valueType value type
 @return a map
 */
- (id<JavaUtilMap>)asMapWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                        withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

/*!
 @brief Converts the table to a list of maps of strings.For each row in the body
  of the table a map is created containing a mapping of column headers to
  the column cell of that row.
 @return a list of maps
 */
- (id<JavaUtilList>)asMaps;

/*!
 @brief Converts the table to a list of maps of <code>keyType</code> to <code>valueType</code>.
 For each row in the body of the table a map is created containing a mapping
  of column headers to the column cell of that row.
 @param keyType key type
 @param valueType value type
 @return a list of maps
 */
- (id<JavaUtilList>)asMapsWithJavaLangReflectType:(id<JavaLangReflectType>)keyType
                          withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

/*!
 @brief Returns a single table cell.
 @param row row index of the cell
 @param column column index of the cell
 @return a single table cell
 @throw IndexOutOfBoundsExceptionwhen either <code>row</code> or <code>column</code>
                                    is outside the table.
 */
- (NSString *)cellWithInt:(jint)row
                  withInt:(jint)column;

/*!
 @brief Returns the cells of the table.
 @return the cells of the table
 */
- (id<JavaUtilList>)cells;

/*!
 @brief Returns a single column.
 @param column column index the column
 @return a single column
 @throw IndexOutOfBoundsExceptionwhen <code>column</code>
                                    is outside the table.
 */
- (id<JavaUtilList>)columnWithInt:(jint)column;

/*!
 @brief Returns a table that is a view on a portion of this
  table.The sub table begins at <code>fromColumn</code> inclusive
  and extends to the end of that table.
 @param fromColumn the beginning column index, inclusive
 @return the specified sub table
 @throw IndexOutOfBoundsExceptionwhen any endpoint is
                                    outside the table.
 @throw IllegalArgumentExceptionwhen a from endpoint
                                    comes after an to endpoint
 */
- (IoCucumberDatatableDataTable *)columnsWithInt:(jint)fromColumn;

/*!
 @brief Returns a table that is a view on a portion of this
  table.The sub table begins at <code>fromColumn</code> inclusive
  and extends to <code>toColumn</code> exclusive.
 @param fromColumn the beginning column index, inclusive
 @param toColumn the end column index, exclusive
 @return the specified sub table
 @throw IndexOutOfBoundsExceptionwhen any endpoint is outside
                                    the table.
 @throw IllegalArgumentExceptionwhen a from endpoint comes
                                    after an to endpoint
 */
- (IoCucumberDatatableDataTable *)columnsWithInt:(jint)fromColumn
                                         withInt:(jint)toColumn;

/*!
 @brief Converts a table to <code>type</code>.
 @param type the desired type
 @param transposed transpose the table before transformation
 @return an instance of <code>type</code>
 */
- (id)convertWithJavaLangReflectType:(id<JavaLangReflectType>)type
                         withBoolean:(jboolean)transposed;

/*!
 @brief Creates a new DataTable.
 <p>
 @param raw the underlying table
 @return an new data table containing the raw values
 @throw NullPointerExceptionif raw is null
 @throw IllegalArgumentExceptionwhen the table is not rectangular or contains null values.
 */
+ (IoCucumberDatatableDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw;

/*!
 @brief Creates a new DataTable with a table converter.
 @param raw the underlying table
 @param tableConverter to transform the table
 @return an new data table containing the raw values
 @throw NullPointerExceptionif either raw or tableConverter is null
 @throw IllegalArgumentExceptionwhen the table is not rectangular or contains null values
 */
+ (IoCucumberDatatableDataTable *)createWithJavaUtilList:(id<JavaUtilList>)raw
         withIoCucumberDatatableDataTable_TableConverter:(id<IoCucumberDatatableDataTable_TableConverter>)tableConverter;

/*!
 @brief Creates an empty DataTable.
 @return an empty DataTable
 */
+ (IoCucumberDatatableDataTable *)emptyDataTable;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

/*!
 @brief Returns the number of rows in the table.
 @return the number of rows in the table
 */
- (jint)height;

/*!
 @brief Returns true iff this table has no cells.
 @return true iff this table has no cells
 */
- (jboolean)isEmpty;

/*!
 @brief Prints a string representation of this
  table to the <code>appendable</code>.
 @param appendable to append the string representation                    of this table to.
 @throw IOExceptionIf an I/O error occurs
 */
- (void)printWithJavaLangAppendable:(id<JavaLangAppendable>)appendable;

/*!
 @brief Prints a string representation of this
  table to the <code>appendable</code>.
 @param appendable to append the string representation                    of this table to.
 */
- (void)printWithJavaLangStringBuilder:(JavaLangStringBuilder *)appendable;

/*!
 @brief Returns a single row.
 @param row row index the column
 @return a single row
 @throw IndexOutOfBoundsExceptionwhen <code>row</code>
                                    is outside the table.
 */
- (id<JavaUtilList>)rowWithInt:(jint)row;

/*!
 @brief Returns a table that is a view on a portion of this
  table.The sub table begins at <code>fromRow</code> inclusive
  and extends to the end of that table.
 @param fromRow the beginning row index, inclusive
 @return the specified sub table
 @throw IndexOutOfBoundsExceptionwhen any endpoint is
                                    outside the table.
 @throw IllegalArgumentExceptionwhen a from endpoint
                                    comes after an to endpoint
 */
- (IoCucumberDatatableDataTable *)rowsWithInt:(jint)fromRow;

/*!
 @brief Returns a table that is a view on a portion of this
  table.The sub table begins at <code>fromRow</code> inclusive
  and extends to <code>toRow</code> exclusive.
 @param fromRow the beginning row index, inclusive
 @param toRow the end row index, exclusive
 @return the specified sub table
 @throw IndexOutOfBoundsExceptionwhen any endpoint is outside
                                    the table.
 @throw IllegalArgumentExceptionwhen a from endpoint comes
                                    after an to endpoint
 */
- (IoCucumberDatatableDataTable *)rowsWithInt:(jint)fromRow
                                      withInt:(jint)toRow;

/*!
 @brief Returns a table that is a view on a portion of this
  table.The sub table begins at <code>fromRow</code> inclusive and 
 <code>fromColumn</code> inclusive and extends to the last column
  and row.
 @param fromRow the beginning row index, inclusive
 @param fromColumn the beginning column index, inclusive
 @return the specified sub table
 @throw IndexOutOfBoundsExceptionwhen any endpoint is outside
                                    the table.
 */
- (IoCucumberDatatableDataTable *)subTableWithInt:(jint)fromRow
                                          withInt:(jint)fromColumn;

/*!
 @brief Returns a table that is a view on a portion of this
  table.The sub table begins at <code>fromRow</code> inclusive and 
 <code>fromColumn</code> inclusive and extends to <code>toRow</code>
  exclusive and <code>toColumn</code> exclusive.
 @param fromRow the beginning row index, inclusive
 @param fromColumn the beginning column index, inclusive
 @param toRow the end row index, exclusive
 @param toColumn the end column index, exclusive
 @return the specified sub table
 @throw IndexOutOfBoundsExceptionwhen any endpoint is outside
                                    the table.
 @throw IllegalArgumentExceptionwhen a from endpoint comes
                                    after an to endpoint
 */
- (IoCucumberDatatableDataTable *)subTableWithInt:(jint)fromRow
                                          withInt:(jint)fromColumn
                                          withInt:(jint)toRow
                                          withInt:(jint)toColumn;

/*!
 @brief Returns a string representation of the this
  table.
 */
- (NSString *)description;

/*!
 @brief Returns a transposed view on this table.Example:
  <p>
  @code

     | a | 7 | 4 |
     | b | 9 | 2 | 
  
@endcode
  <p>
  becomes: 
 @code

  | a | b |
  | 7 | 9 |
  | 4 | 2 | 
  
@endcode
 @return a transposed view of the table
 */
- (IoCucumberDatatableDataTable *)transpose;

/*!
 @brief Returns the number of columns in the table.
 @return the number of columns in the table
 */
- (jint)width;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable)

FOUNDATION_EXPORT IoCucumberDatatableDataTable *IoCucumberDatatableDataTable_createWithJavaUtilList_(id<JavaUtilList> raw);

FOUNDATION_EXPORT IoCucumberDatatableDataTable *IoCucumberDatatableDataTable_createWithJavaUtilList_withIoCucumberDatatableDataTable_TableConverter_(id<JavaUtilList> raw, id<IoCucumberDatatableDataTable_TableConverter> tableConverter);

FOUNDATION_EXPORT IoCucumberDatatableDataTable *IoCucumberDatatableDataTable_emptyDataTable(void);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTable)

#endif

#if !defined (IoCucumberDatatableDataTable_TableConverter_) && (INCLUDE_ALL_IoCucumberDatatableDataTable || defined(INCLUDE_IoCucumberDatatableDataTable_TableConverter))
#define IoCucumberDatatableDataTable_TableConverter_

@class IoCucumberDatatableDataTable;
@protocol JavaLangReflectType;
@protocol JavaUtilList;
@protocol JavaUtilMap;

/*!
 @brief Converts a <code>DataTable</code> to another type.
 <p>
  There are three ways in which a table might be mapped to a certain type. The table converter considers the
  possible conversions in this order: 
 <ol>
  <li>
  Using the whole table to create a single instance. 
 </li>
  <li>
  Using individual rows to create a collection of instances. The first row may be used as header. 
 </li>
  <li>
  Using individual cells to a create a collection of instances. 
 </li>
  </ol>
 */
@protocol IoCucumberDatatableDataTable_TableConverter < JavaObject >

/*!
 @brief Converts a <code>DataTable</code> to another type.
 <p>
  Delegates to <code>toList</code>, <code>toLists</code>, <code>toMap</code> and <code>toMaps</code>
  for <code>List&lt;T&gt;</code>, <code>List&lt;List&lt;T&gt;&gt;</code>, <code>Map&lt;K,V&gt;</code> and 
 <code>List&lt;Map&lt;K,V&gt;&gt;</code> respectively.
 @param dataTable the table to convert
 @param type the type to convert to
 @return an object of type
 */
- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type;

/*!
 @brief Converts a <code>DataTable</code> to another type.
 <p>
  Delegates to <code>toList</code>, <code>toLists</code>, <code>toMap</code> and <code>toMaps</code>
  for <code>List&lt;T&gt;</code>, <code>List&lt;List&lt;T&gt;&gt;</code>, <code>Map&lt;K,V&gt;</code> and 
 <code>List&lt;Map&lt;K,V&gt;&gt;</code> respectively.
 @param dataTable the table to convert
 @param type the type to convert to
 @param transposed whether the table should be transposed first.
 @return an object of type
 */
- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type
                                  withBoolean:(jboolean)transposed;

/*!
 @brief Converts a <code>DataTable</code> to a list.
 <p>
  A table converter may either map each row or each individual cell to a list element. 
 <p>
  For example: 
 <p>
  @code

  | Annie M. G. Schmidt | 1911-03-20 |
  | Roald Dahl          | 1916-09-13 |
  convert.toList(table, String.class); 
  
@endcode
  can become 
 @code

   [ "Annie M. G. Schmidt", "1911-03-20", "Roald Dahl", "1916-09-13" ] 
  
@endcode
  <p>
  While: 
 @code

    convert.toList(table, Author.class); 
  
@endcode
  <p>
  can become: 
 <p>
  @code

  [
    Author[ name: Annie M. G. Schmidt, birthDate: 1911-03-20 ],
    Author[ name: Roald Dahl,          birthDate: 1916-09-13 ] ] 
  
@endcode
  <p>
  Likewise: 
 <p>
  @code

   | firstName   | lastName | birthDate  |
   | Annie M. G. | Schmidt  | 1911-03-20 |
   | Roald       | Dahl     | 1916-09-13 |
  convert.toList(table, Authors.class); 
  
@endcode
  can become: 
 @code

   [
    Author[ firstName: Annie M. G., lastName: Schmidt,  birthDate: 1911-03-20 ],
    Author[ firstName: Roald,       lastName: Dahl,     birthDate: 1916-09-13 ]
   ] 
  
@endcode
 @param dataTable the table to convert
 @param itemType the  list item type to convert to
 @return a list of objects of <code>itemType</code>
 */
- (id<JavaUtilList>)toListWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

/*!
 @brief Converts a <code>DataTable</code> to a list of lists.
 <p>
  Each row maps to a list, each table cell a list entry. 
 <p>
  For example: 
 <p>
  @code

  | Annie M. G. Schmidt | 1911-03-20 |
  | Roald Dahl          | 1916-09-13 |
  convert.toLists(table, String.class); 
  
@endcode
  can become 
 @code

   [
     [ "Annie M. G. Schmidt", "1911-03-20" ],
     [ "Roald Dahl",          "1916-09-13" ]
   ] 
  
@endcode
  <p>
 @param dataTable the table to convert
 @param itemType the  list item type to convert to
 @return a list of lists of objects of <code>itemType</code>
 */
- (id<JavaUtilList>)toListsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                    withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

/*!
 @brief Converts a <code>DataTable</code> to a map.
 <p>
  The left column of the table is used to instantiate the key values. The other columns are used to instantiate
  the values. 
 <p>
  For example: 
 <p>
  @code

  | 4a1 | Annie M. G. Schmidt | 1911-03-20 |
  | c92 | Roald Dahl          | 1916-09-13 |
  convert.toMap(table, Id.class, Authors.class); 
  
@endcode
  can become: 
 @code

   {
    Id[ 4a1 ]: Author[ name: Annie M. G. Schmidt, birthDate: 1911-03-20 ],
    Id[ c92 ]: Author[ name: Roald Dahl,          birthDate: 1916-09-13 ]
   } 
  
@endcode
  <p>
  The header cells may be used to map values into the types. When doing so the first header cell may be
  left blank. 
 <p>
  For example: 
 <p>
  @code

  |     | firstName   | lastName | birthDate  |
  | 4a1 | Annie M. G. | Schmidt  | 1911-03-20 |
  | c92 | Roald       | Dahl     | 1916-09-13 |
  convert.toMap(table, Id.class, Authors.class); 
  
@endcode
  can becomes: 
 @code

   {
    Id[ 4a1 ]: Author[ firstName: Annie M. G., lastName: Schmidt, birthDate: 1911-03-20 ],
    Id[ c92 ]: Author[ firstName: Roald,       lastName: Dahl,    birthDate: 1916-09-13 ]
   } 
  
@endcode
 @param dataTable the table to convert
 @param keyType the  key type to convert to
 @param valueType the  value to convert to
 @return a map of <code>keyType</code> <code>valueType</code>
 */
- (id<JavaUtilMap>)toMapWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                 withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                 withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

/*!
 @brief Converts a <code>DataTable</code> to a list of maps.
 <p>
  Each map represents a row in the table. The map keys are the column headers. 
 <p>
  For example: 
 <p>
  @code

  | firstName   | lastName | birthDate  |
  | Annie M. G. | Schmidt  | 1911-03-20 |
  | Roald       | Dahl     | 1916-09-13 | 
  
@endcode
  can become: 
 @code

   [
    {firstName: Annie M. G., lastName: Schmidt, birthDate: 1911-03-20 }
    {firstName: Roald,       lastName: Dahl,    birthDate: 1916-09-13 }
   ] 
  
@endcode
 @param dataTable the table to convert
 @param keyType the  key type to convert to
 @param valueType the  value to convert to
 @return a list of maps of <code>keyType</code> <code>valueType</code>
 */
- (id<JavaUtilList>)toMapsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_TableConverter)

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTable_TableConverter)

#endif

#if !defined (IoCucumberDatatableDataTable_AbstractTableConverter_) && (INCLUDE_ALL_IoCucumberDatatableDataTable || defined(INCLUDE_IoCucumberDatatableDataTable_AbstractTableConverter))
#define IoCucumberDatatableDataTable_AbstractTableConverter_

@class IOSClass;
@protocol JavaLangReflectType;

@interface IoCucumberDatatableDataTable_AbstractTableConverter : NSObject < IoCucumberDatatableDataTable_TableConverter >

#pragma mark Package-Private

- (instancetype __nonnull)init;

+ (id<JavaLangReflectType>)listItemTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (id<JavaLangReflectType>)mapKeyTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (id<JavaLangReflectType>)mapValueTypeWithJavaLangReflectType:(id<JavaLangReflectType>)type;

+ (id<JavaLangReflectType>)typeArgWithJavaLangReflectType:(id<JavaLangReflectType>)type
                                             withIOSClass:(IOSClass *)wantedRawType
                                                  withInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_AbstractTableConverter)

FOUNDATION_EXPORT void IoCucumberDatatableDataTable_AbstractTableConverter_init(IoCucumberDatatableDataTable_AbstractTableConverter *self);

FOUNDATION_EXPORT id<JavaLangReflectType> IoCucumberDatatableDataTable_AbstractTableConverter_listItemTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> IoCucumberDatatableDataTable_AbstractTableConverter_typeArgWithJavaLangReflectType_withIOSClass_withInt_(id<JavaLangReflectType> type, IOSClass *wantedRawType, jint index);

FOUNDATION_EXPORT id<JavaLangReflectType> IoCucumberDatatableDataTable_AbstractTableConverter_mapKeyTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

FOUNDATION_EXPORT id<JavaLangReflectType> IoCucumberDatatableDataTable_AbstractTableConverter_mapValueTypeWithJavaLangReflectType_(id<JavaLangReflectType> type);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTable_AbstractTableConverter)

#endif

#if !defined (IoCucumberDatatableDataTable_NoConverterDefined_) && (INCLUDE_ALL_IoCucumberDatatableDataTable || defined(INCLUDE_IoCucumberDatatableDataTable_NoConverterDefined))
#define IoCucumberDatatableDataTable_NoConverterDefined_

@class IoCucumberDatatableDataTable;
@protocol JavaLangReflectType;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface IoCucumberDatatableDataTable_NoConverterDefined : NSObject < IoCucumberDatatableDataTable_TableConverter >

#pragma mark Public

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type;

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type
                                  withBoolean:(jboolean)transposed;

- (id<JavaUtilList>)toListWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilList>)toListsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                    withJavaLangReflectType:(id<JavaLangReflectType>)itemType;

- (id<JavaUtilMap>)toMapWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                 withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                 withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

- (id<JavaUtilList>)toMapsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaLangReflectType:(id<JavaLangReflectType>)valueType;

#pragma mark Package-Private

- (instancetype __nonnull)init;

@end

J2OBJC_EMPTY_STATIC_INIT(IoCucumberDatatableDataTable_NoConverterDefined)

FOUNDATION_EXPORT void IoCucumberDatatableDataTable_NoConverterDefined_init(IoCucumberDatatableDataTable_NoConverterDefined *self);

FOUNDATION_EXPORT IoCucumberDatatableDataTable_NoConverterDefined *new_IoCucumberDatatableDataTable_NoConverterDefined_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT IoCucumberDatatableDataTable_NoConverterDefined *create_IoCucumberDatatableDataTable_NoConverterDefined_init(void);

J2OBJC_TYPE_LITERAL_HEADER(IoCucumberDatatableDataTable_NoConverterDefined)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_IoCucumberDatatableDataTable")
