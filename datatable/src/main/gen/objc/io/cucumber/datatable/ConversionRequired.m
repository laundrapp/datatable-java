//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/Salton/Documents/Projects/datatable/datatable/src/main/java/io/cucumber/datatable/ConversionRequired.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "io/cucumber/datatable/ConversionRequired.h"
#include "io/cucumber/datatable/CucumberDataTableException.h"
#include "io/cucumber/datatable/DataTable.h"
#include "java/lang/reflect/Type.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@implementation IoCucumberDatatableConversionRequired

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype __nonnull)init {
  IoCucumberDatatableConversionRequired_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type {
  return [self convertWithIoCucumberDatatableDataTable:dataTable withJavaLangReflectType:type withBoolean:false];
}

- (id)convertWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                      withJavaLangReflectType:(id<JavaLangReflectType>)type
                                  withBoolean:(jboolean)transposed {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to %s. You have to write the conversion for it in this method", [IOSObjectArray arrayWithObjects:(id[]){ type } count:1 type:NSObject_class_()]));
}

- (id<JavaUtilList>)toListWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<%s>. You have to write the conversion for it in this method", [IOSObjectArray arrayWithObjects:(id[]){ itemType } count:1 type:NSObject_class_()]));
}

- (id<JavaUtilList>)toListsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                    withJavaLangReflectType:(id<JavaLangReflectType>)itemType {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<List<%s>>. You have to write the conversion for it in this method", [IOSObjectArray arrayWithObjects:(id[]){ itemType } count:1 type:NSObject_class_()]));
}

- (id<JavaUtilMap>)toMapWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                 withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                 withJavaLangReflectType:(id<JavaLangReflectType>)valueType {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to Map<%s,%s>. You have to write the conversion for it in this method", [IOSObjectArray arrayWithObjects:(id[]){ keyType, valueType } count:2 type:NSObject_class_()]));
}

- (id<JavaUtilList>)toMapsWithIoCucumberDatatableDataTable:(IoCucumberDatatableDataTable *)dataTable
                                   withJavaLangReflectType:(id<JavaLangReflectType>)keyType
                                   withJavaLangReflectType:(id<JavaLangReflectType>)valueType {
  @throw create_IoCucumberDatatableCucumberDataTableException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"Can't convert DataTable to List<Map<%s,%s>>. You have to write the conversion for it in this method", [IOSObjectArray arrayWithObjects:(id[]){ keyType, valueType } count:2 type:NSObject_class_()]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 5, 1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 7, 1, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 12, 10, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[2].selector = @selector(convertWithIoCucumberDatatableDataTable:withJavaLangReflectType:withBoolean:);
  methods[3].selector = @selector(toListWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[4].selector = @selector(toListsWithIoCucumberDatatableDataTable:withJavaLangReflectType:);
  methods[5].selector = @selector(toMapWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:);
  methods[6].selector = @selector(toMapsWithIoCucumberDatatableDataTable:withJavaLangReflectType:withJavaLangReflectType:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convert", "LIoCucumberDatatableDataTable;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)TT;", "LIoCucumberDatatableDataTable;LJavaLangReflectType;Z", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Z)TT;", "toList", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)Ljava/util/List<TT;>;", "toLists", "<T:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/List<TT;>;>;", "toMap", "LIoCucumberDatatableDataTable;LJavaLangReflectType;LJavaLangReflectType;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/Map<TK;TV;>;", "toMaps", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lio/cucumber/datatable/DataTable;Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/util/List<Ljava/util/Map<TK;TV;>;>;" };
  static const J2ObjcClassInfo _IoCucumberDatatableConversionRequired = { "ConversionRequired", "io.cucumber.datatable", ptrTable, methods, NULL, 7, 0x10, 7, 0, -1, -1, -1, -1, -1 };
  return &_IoCucumberDatatableConversionRequired;
}

@end

void IoCucumberDatatableConversionRequired_init(IoCucumberDatatableConversionRequired *self) {
  NSObject_init(self);
}

IoCucumberDatatableConversionRequired *new_IoCucumberDatatableConversionRequired_init() {
  J2OBJC_NEW_IMPL(IoCucumberDatatableConversionRequired, init)
}

IoCucumberDatatableConversionRequired *create_IoCucumberDatatableConversionRequired_init() {
  J2OBJC_CREATE_IMPL(IoCucumberDatatableConversionRequired, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(IoCucumberDatatableConversionRequired)
